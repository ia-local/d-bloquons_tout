// docs/map.js - VERSION COMPL√àTE AVEC SIMULATION T√âL√âGRAM (Mode Statique)

const MAP_CONFIG = {
    DEFAULT_CENTER: [46.603354, 1.888334], 
    DEFAULT_ZOOM: 6,
    MAX_ZOOM: 14
};

let map = null; 

// --- 1. SIMULATION DES DONN√âES JSON (MOCK DATA) ---

const MOCK_DATA = {
    // Donn√©es du Dashboard (Simul√©)
    '/api/dashboard/summary': { 
        totalTransactions: 4528, activeAlerts: 12, caisseSolde: 154800.75, boycottCount: 56, ricCount: 3, beneficiaryCount: 1250, monthlyAllocation: 123.84, estimatedManifestantCount: 3400
    },
    '/api/dashboard/utmi-insights': { 
        totalUTMI: 8945.54, totalTaxAvoided: 5200.00, taxCollectionSummary: {} 
    },
    '/smartContract/api/dashboard-data': {
        totalRecettes: 154800.75, totalDepenses: 62500.00, nombreBeneficiaires: 500, tresorerie: 92300.75
    },
    // Donn√©es de la Carte (Simul√©)
    '/map/data/manifestations': [
        { id: 'm-001', name: 'Rassemblement', city: 'Paris', lat: 48.8566, lon: 2.3522, type: 'Prefecture', count: 1200, video_link: "https://www.youtube.com/watch?v=mock_video_paris" },
        { id: 'm-002', name: 'Rond-Point', city: 'Lyon', lat: 45.7578, lon: 4.8320, type: 'Rassemblement', count: 500, video_link: null },
        { id: 'm-003', name: 'Blocage', city: 'Marseille', lat: 43.2965, lon: 5.3813, type: 'Blocage', count: 850, video_link: null },
        { id: 'm-004', name: 'Boycott Carrefour', city: 'Bordeaux', lat: 44.8378, lon: -0.5792, type: 'Boycott', count: 200, video_link: "https://www.youtube.com/watch?v=mock_video_bordeaux" }
    ]
};

// Donn√©es du Telegram Router (Simul√©)
const MOCK_TELEGRAM_DATA = {
    topicLinks: {
        'üé® Studio (Cr√©ation)': 'https://t.me/c/2803900118/1232',
        'üìù Revendication (D√©tails)': 'https://t.me/c/2803900118/3',
        'üó≥Ô∏è RIC (R√©f√©rendum)': 'https://t.me/c/2803900118/329',
        'üë• Organisation (Planning)': 'https://t.me/c/2803900118/2',
        'üó∫Ô∏è Cartes (Ralliement)': 'https://t.me/c/2803900118/991',
        'üìÑ Documents (L√©gislation)': 'https://t.me/c/2803900118/13',
        'üìû Contacts (Presse/√âlus)': 'https://t.me/c/2803900118/8',
        '‚öñÔ∏è Auditions Libres': 'https://t.me/c/2803900118/491'
    },
    commands: [
        { cmd: '/start', desc: 'Revenir au menu principal du Bot.' },
        { cmd: '/topics', desc: 'Acc√©der directement aux salons de discussion Telegram.' },
        { cmd: '/manifeste', desc: 'Lire un extrait du manifeste du mouvement.' },
        { cmd: '/ric', desc: 'Tout savoir sur le R√©f√©rendum d\'Initiative Citoyenne.' },
        { cmd: '/destitution', desc: 'Comprendre la proc√©dure de destitution (Art. 68).' },
        { cmd: '/greve', desc: 'Infos pratiques sur la Gr√®ve du 10 Septembre 2025.' },
        { cmd: '/imagine [desc]', desc: 'G√©n√©rer une image libre via l\'IA (Simul√©).' },
        { cmd: '/caricature [desc]', desc: 'G√©n√©rer une caricature politique via l\'IA (Simul√©).' },
        { cmd: '/caricature_plainte', desc: 'Caricature automatis√©e sur la Plainte P√©nale.' },
        { cmd: '/galerie', desc: 'Acc√©der √† la galerie des images g√©n√©r√©es.' },
        { cmd: '/stats', desc: 'Afficher les statistiques d\'utilisation du bot.' },
        { cmd: '/help', desc: 'Afficher toutes les commandes.' },
    ]
};

// --- 2. FONCTIONS DE SIMULATION ET DE LA CARTE ---

async function fetchData(url) {
    console.log(`[Statique Mode] Simulation de l'appel √† l'API: ${url}`);
    await new Promise(resolve => setTimeout(resolve, 300));

    const data = MOCK_DATA[url];
    if (data) {
        return data;
    } else {
        // Logique pour les donn√©es simul√©es qui n'ont pas une cl√© directe (e.g., GEE)
        if (url.startsWith('/api/gee/tiles/')) {
            return MOCK_DATA['/api/gee/tiles/COPERNICUS/S2_SR_HARMONIZED?bands=B4,B3,B2&cloud_percentage=5'];
        }
        console.error(`[Erreur Statique] Aucune donn√©e de simulation trouv√©e pour l'URL: ${url}`);
        throw new Error("Donn√©es de simulation non trouv√©es.");
    }
}

// (Les fonctions initMap, loadGeeTiles, loadManifestationPoints restent inchang√©es 
// et utilisent fetchData ci-dessus. Voir la r√©ponse pr√©c√©dente pour leur contenu.)

async function initMap() { /* ... Contenu inchang√© de la r√©ponse pr√©c√©dente ... */ }
async function loadGeeTiles() { /* ... Contenu inchang√© de la r√©ponse pr√©c√©dente ... */ }
async function loadManifestationPoints() { /* ... Contenu inchang√© de la r√©ponse pr√©c√©dente ... */ }
async function loadDashboardData() { /* ... Contenu inchang√© de la r√©ponse pr√©c√©dente ... */ }


// --- 3. RENDU DE LA PAGE T√âL√âGRAM (NOUVEAU) ---
// Partie √† mettre √† jour dans votre fichier map.js
function loadTelegramContent() {
    const container = document.getElementById('telegram-content-container');
    if (container.hasLoaded) return; 

    // Donn√©es des topics (inchang√©es)
    const topicHtml = `
        <div class="content quick-start" style="transform: none;">
            <h3 class="font-yellow">üîó Salons de Discussion Telegram (TOPICS)</h3>
            <p>Acc√®s direct aux salons de discussion d√©di√©s √† l'organisation du mouvement.</p>
            <div class="feature-grid" style="margin-top: 15px;">
                ${Object.entries(MOCK_TELEGRAM_DATA.topicLinks).map(([label, url]) => `
                    <div class="feature-card" style="transform: none; text-align: center; background: #f9e25b; color: #1a1a1a;">
                        <h4>${label}</h4>
                        <a href="${url}" target="_blank" class="btn btn-primary" style="margin-top: 10px; padding: 5px 10px;">Acc√©der au Salon</a>
                    </div>
                `).join('')}
            </div>
        </div>
    `;

    // Structure HTML pour la pagination des commandes
    const commandsHtmlStructure = `
        <div class="content quick-start" style="transform: none; margin-top: 30px;">
            <h3 class="font-red">ü§ñ Commandes de l'Assistant Bot (Simulation Pagination)</h3>
            <p>Liste pagin√©e des commandes IA et d'information disponibles.</p>
            <table>
                <thead>
                    <tr><th>Commande</th><th>Description</th></tr>
                </thead>
                <tbody id="commands-list-body">
                    </tbody>
            </table>
            <div id="commands-pagination-controls" style="text-align: center; margin-top: 15px;">
                </div>
        </div>
    `;

    container.innerHTML = topicHtml + commandsHtmlStructure;

    // --- LOGIQUE DE PAGINATION ---

    const listContainer = document.getElementById('commands-list-body');
    const controlsContainer = document.getElementById('commands-pagination-controls');

    // Fonction de rendu d'un √©l√©ment de commande (correspond au <tbody>)
    const commandRenderer = (item) => {
        return `
            <tr>
                <td class="font-yellow break-word" style="font-weight: bold;">${item.cmd}</td>
                <td>${item.desc}</td>
            </tr>
        `;
    };

    // Appel de la fonction globale de pagination
    // Assurez-vous que la fonction window.initializePagination est d√©finie par pagination.js
    if (window.initializePagination) {
        window.initializePagination(
            MOCK_TELEGRAM_DATA.commands,
            listContainer,
            controlsContainer,
            commandRenderer
        );
    } else {
        // Fallback si le script de pagination n'est pas charg√©
        listContainer.innerHTML = '<tr><td colspan="2" class="font-red">Erreur: Script de pagination non charg√©.</td></tr>';
    }

    container.hasLoaded = true;
}


// --- 4. NAVIGATION (MISE √Ä JOUR) ---

function setupNavigation() {
    const navLinks = document.querySelectorAll('#bottom-navigation-menu a');
    
    function showPage(pageName) {
        document.querySelectorAll('.page').forEach(page => { page.classList.remove('active'); });
        const activePage = document.getElementById(`${pageName}-page`);
        if (activePage) activePage.classList.add('active');
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('data-page') === pageName) link.classList.add('active');
        });
        
        if (pageName === 'map') {
             initMap();
             setTimeout(() => { map && map.invalidateSize(); }, 50); 
        } else if (pageName === 'dashboard') {
            loadDashboardData();
        } else if (pageName === 'settings') { // Appel de la nouvelle fonction
            loadTelegramContent(); 
        }
    }

    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const pageName = link.getAttribute('data-page');
            showPage(pageName);
        });
    });
    
    showPage('map');
}

document.addEventListener('DOMContentLoaded', setupNavigation);