// docs/map-item.js - Logique d'Interaction du Menu Radial de la Carte et des Actions GamifiÃ©es

const ACTION_COSTS = {
    ANALYZE_TARGET: 10, 
    SCAN_SECTOR: 5,     
    RECHARGE_BASE: 50   
};

const layerStates = {
    'manifestations': false,
    'gee-satellite': false
};

/**
 * Met Ã  jour l'Ã©tat visuel du bouton dans le menu radial (classe 'active-layer').
 */
function updateButtonState(layerName, isActive) {
    const selector = `button[data-map-layer-toggle="${layerName}"]`;
    const button = document.querySelector(selector);
    if (button) {
        if (isActive) {
            button.classList.add('active-layer');
        } else {
            button.classList.remove('active-layer');
        }
    }
}

// --- 1. GESTION DES COUCHES ---

/**
 * ðŸ›‘ INTERFACE GLOBALE ðŸ›‘ : AppelÃ© par app.js.
 * DÃ©clenche la bascule Leaflet et met Ã  jour l'Ã©tat UI.
 */
window.toggleMapLayer = function(layerName) {
    // VÃ©rifie si la fonction Leaflet de map.js existe
    if (typeof window.toggleMapLayerInMapJS !== 'function') {
         console.error("Erreur: window.toggleMapLayerInMapJS (dans map.js) n'est pas dÃ©fini.");
         return;
    }
    
    const success = window.toggleMapLayerInMapJS(layerName);
    
    if (success) {
        layerStates[layerName] = !layerStates[layerName];
        updateButtonState(layerName, layerStates[layerName]);
        console.log(`[MENU] Couche ${layerName} basculÃ©e. Ã‰tat: ${layerStates[layerName] ? 'Actif' : 'Inactif'}.`);
    } 
};


// --- 2. GESTION DES ACTIONS GAMIFIÃ‰ES ---

/**
 * ðŸ›‘ INTERFACE GLOBALE ðŸ›‘ : GÃ¨re les actions du menu (recharge, scan).
 */
window.handleMapAction = function(action) {
    if (!window.AGENT_PROFILE || typeof window.updateProfileUI !== 'function' || typeof window.grantReward !== 'function') {
        console.error("Erreur: Profil ou fonctions de gamification non chargÃ©es.");
        return;
    }
    
    let cost = 0;
    
    switch (action) {
        case 'recharge':
            cost = ACTION_COSTS.RECHARGE_BASE;
            if (window.AGENT_PROFILE.utmiCredits >= cost) {
                window.AGENT_PROFILE.utmiCredits -= cost;
                window.AGENT_PROFILE.energy = window.AGENT_PROFILE.maxEnergy; 
                console.log(`âœ… RECHARGE Ã‰NERGIE rÃ©ussie.`);
                alert(`Recharge d'Ã‰nergie rÃ©ussie ! -${cost} UTMi.`);
            } else {
                alert(`Ã‰chec: ${cost} UTMi requis.`);
            }
            break;
            
        case 'scan':
            cost = ACTION_COSTS.SCAN_SECTOR;
            if (window.AGENT_PROFILE.energy >= cost) {
                window.AGENT_PROFILE.energy -= cost;
                window.grantReward(10, 0); // RÃ©compense fixe de 10 UTMi pour le scan
                console.log(`ðŸ“¡ SCAN SECTEUR effectuÃ©.`);
                alert(`Scan de Secteur effectuÃ©. -${cost} EA, +10 UTMi.`);
                // ðŸ’¡ Ici vous pourriez appeler une fonction pour 'dÃ©voiler' de nouveaux points
            } else {
                 alert(`Ã‰chec du scan: ${cost} EA requis.`);
            }
            break;
    }
    
    window.updateProfileUI(); 
};