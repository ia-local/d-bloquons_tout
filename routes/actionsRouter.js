// routes/actionsRouter.js

const express = require('express');
const router = express.Router(); 

// NOTE: Les variables et fonctions (actionsData, loadActionsData, saveActionsData, retryApiCall, GROQ_MODEL, groq) 
// sont rendues globales par serveur.js, nous les utilisons directement via 'global.'.

// ----------------------------------------------------------------------
// CRUD ACTIONS TACTIQUES (/api/actions) - Corps des fonctions omis pour la concision
// ----------------------------------------------------------------------

// CREATE
router.post('/', async (req, res) => {
    // ... (Logique CRUD post)
});

// READ
router.get('/data', async (req, res) => {
    try {
        await global.loadActionsData();
        if (!global.actionsData || !global.actionsData.liste_actions_consolidee) {
            return res.status(500).json({ error: "Structure de donn√©es d'actions invalide apr√®s chargement." });
        }
        res.json(global.actionsData);
    } catch (error) {
         console.error("ERREUR 500: √âchec critique lors de la lecture des donn√©es d'actions:", error);
         res.status(500).json({ error: "√âchec de la lecture des donn√©es d'actions sur le serveur.", details: error.message });
    }
});

// UPDATE
router.put('/:id', async (req, res) => {
    // ... (Logique CRUD put)
});

// DELETE
router.delete('/:id', async (req, res) => {
    // ... (Logique CRUD delete)
});

// üõë GENERATE (G√©n√©ration du plan tactique) üõë
router.get('/plan_action', async (req, res) => {
    const actionId = parseInt(req.query.actionId);
    
    // Assurer que les donn√©es d'actions sont charg√©es (s√©curit√©)
    try {
        await global.loadActionsData();
    } catch (e) {
        console.warn("Avertissement: √âchec du rechargement des donn√©es d'actions avant l'appel IA.");
    }

    if (!actionId) {
        return res.status(400).json({ error: "Le param√®tre 'actionId' est manquant." });
    }

    const action = global.actionsData?.liste_actions_consolidee?.find(a => a.id === actionId);

    if (!action) {
        // Retourne 404 si l'action n'est pas dans la liste (liste vide ou ID erron√©)
        return res.status(404).json({ error: `Action avec l'ID '${actionId}' non trouv√©e dans la liste consolid√©e.` });
    }
    
    // ------------------------------------------------------------------
    // üõë NOUVELLE LOGIQUE : Utilise 'description' ou 'action' en priorit√©
    // ------------------------------------------------------------------
    let actionDescriptionForAI = action.description || action.action || action.titre || 'Action inconnue.';

    // Nettoyer les caract√®res sp√©ciaux et les emojis/Markdown pour l'IA
    actionDescriptionForAI = actionDescriptionForAI
        .replace(/\*\*/g, '') // Supprime les **gras**
        .replace(/‚ö†Ô∏è/g, '') // Supprime les symboles
        .replace(/üî•/g, '')
        .trim();

    // ------------------------------------------------------------------
    
    // üõë Construction du prompt utilisant actionDescriptionForAI
    const prompt = `
        En tant qu'expert en activisme tactique et analyse juridique, vous allez g√©n√©rer un plan strat√©gique et pratique pour l'action suivante :
        
        Action : "${actionDescriptionForAI}"
        Cat√©gorie : ${action.type}
        Risque l√©gal associ√© : ${action.risque}
        Cons√©quences juridiques maximales : ${action.consequences_juridiques}
        
        Votre r√©ponse doit fournir un "Plan d'Optimisation Tactique" structur√© :
        1. **Objectifs Clairs** : Quel est l'impact r√©el et mesurable de cette action ?
        2. **Pr√©paration (Avant)** : Mat√©riel, reconnaissance du terrain, timing optimal.
        3. **Ex√©cution (Pendant)** : √âtapes pr√©cises pour maximiser la perturbation ou le message.
        4. **Att√©nuation du Risque (L√©gal)** : Conseils pour rester dans la cat√©gorie de risque indiqu√©e et √©viter la requalification en d√©lit plus grave.
        
        INSTRUCTIONS DE FORMATAGE CRUCIALE : La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'. Utilisez les balises <h3> pour les titres de section et des listes (<ul> ou <ol>) pour la structure.
    `;

    try {
        const apiCall = async () => global.groq.chat.completions.create({
            messages: [
                { role: "system", content: "Vous √™tes un analyste tactique sp√©cialis√© dans l'activisme non-violent, fournissant des plans structur√©s en HTML. Le plan doit toujours respecter le niveau de risque l√©gal fourni." },
                { role: "user", content: prompt },
            ],
            model: global.GROQ_MODEL,
            temperature: 0.7,
        });

        const chatCompletion = await global.retryApiCall(apiCall);

        res.json({
            action_id: actionId,
            action_description: action.action, // Renvoie la description originale non nettoy√©e pour le front-end
            tactical_plan: chatCompletion.choices[0]?.message?.content || `<div class="error-message">‚ùå Pas de plan g√©n√©r√©.</div>`
        });

    } catch (error) {
        console.error(`Erreur Groq lors de la g√©n√©ration du plan pour l'action ${actionId}:`, error.message);
        res.status(500).json({ error: `√âchec de la g√©n√©ration du plan IA. D√©tails: ${error.message}` });
    }
});


module.exports = router;