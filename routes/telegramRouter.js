// Fichier : routes/telegramRouter.js (VERSION AVEC MANIFESTE D√âTAILL√â)

const { Telegraf, Markup } = require('telegraf');
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const fs = require('fs/promises');
const Groq = require('groq-sdk');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const dataService = require('../services/dataService.js'); // üëà AJOUTEZ CETTE LIGNE

const axios = require('axios'); // N√©cessaire pour la commande /user

// --- CONSTANTES ET VARIABLES GLOBALES ---
const STATS_FILE = path.join(__dirname, '..', 'data', 'stats.json');
const DATABASE_FILE_PATH = path.join(__dirname, '..', 'data', 'database.json');

// üõë CONSTANTES D'ACC√àS WEB (CORRIG√âES et consolid√©es)
const GIT_APP_HTTPS_URL = 'https://ia-local.github.io/d-bloquons_tout/'; // URL HTTPS pour lien simple
const WEB_APP_TWA_URL = 'https://t.me/Pi_ia_Pibot/Manifest_910'; // URL TWA (pour Markup.button.webApp)
const WEB_APP_URL = 'https://ia-local.github.io/d-bloquons_tout/'; // URL Web simple pour le bouton URL

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000/api/beneficiaries'; // Endpoint de l'API Citoyen
const API_CAISSE_URL = process.env.API_CAISSE_URL || 'http://localhost:3000/api/caisse-manifestation'; // Endpoint de l'API Caisse (Ajout√© √† l'√©tape pr√©c√©dente)
const ORGANIZER_GROUP_ID_CHAT = process.env.ORGANIZER_GROUP_ID_CHAT || "-100123456789"; // ID de chat d'organisateurs

const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TELEGRAM_API_KEY = process.env.TELEGRAM_API_KEY || '7281441282:AAGA5F0nRyEsBKIfQOGcAjelkE3DA8IWByU';

// üõë CONSTANTES DE NAVIGATION ET DE PAGINATION
const GALLERY_DIR = path.join(__dirname, '..', 'data', 'galerie');
const IMAGES_PER_PAGE = 4; // Affichage de 4 images par page dans le diaporama

const TOPIC_LINKS = {
    'üé® Application web': 'https://t.me/Pi_ia_Pibot/Manifest_910',
    'üé® Studio (Cr√©ation)': 'https://t.me/c/2803900118/1232',
    'üìù Revendication (D√©tails)': 'https://t.me/c/2803900118/3',
    'üó≥Ô∏è RIC (R√©f√©rendum)': 'https://t.me/c/2803900118/329',
    'üë• Organisation (Planning)': 'https://t.me/c/2803900118/2',
    'üó∫Ô∏è Cartes (Ralliement)': 'https://t.me/c/2803900118/991',
    'üìÑ Documents (L√©gislation)': 'https://t.me/c/2803900118/13',
    'üìû Contacts (Presse/√âlus)': 'https://t.me/c/2803900118/8',
    '‚öñÔ∏è Auditions Libres': 'https://t.me/c/2803900118/491'
};

// Initialisations des services
const groq = new Groq({ apiKey: GROQ_API_KEY });
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const bot = new Telegraf(TELEGRAM_API_KEY, {
    telegram: { webhookReply: true }
});
let database = {};
let commands = [];
// --- FONCTIONS UTILITAIRES DE BASE ---
async function readJsonFile(filePath, defaultValue = {}) {
    try {
        await fs.mkdir(path.dirname(filePath), { recursive: true });
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.writeFile(filePath, JSON.stringify(defaultValue, null, 2), 'utf8');
            return defaultValue;
        }
        console.error(`Erreur de lecture du fichier ${filePath}:`, error);
        return defaultValue;
    }
}
async function writeJsonFile(filePath, data) {
    try {
        await fs.mkdir(path.dirname(filePath), { recursive: true });
        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
        console.error(`Erreur d'√©criture du fichier ${filePath}:`, error);
    }
}
async function saveGeneratedImage(imageDataBase64, type) {
    try {
        await fs.mkdir(GALLERY_DIR, { recursive: true });
        const fileName = `${type}_${Date.now()}.webp`;
        const filePath = path.join(GALLERY_DIR, fileName);
        const imageBuffer = Buffer.from(imageDataBase64, 'base64');
        await fs.writeFile(filePath, imageBuffer);
        console.log(`üñºÔ∏è Image sauvegard√©e : ${filePath}`);
    } catch (error) {
        console.error(`Erreur lors de la sauvegarde de l'image dans la galerie:`, error);
    }
}
async function getGroqChatResponse(promptInput, model, systemMessageContent) {
    try {
        const messages = [];
        if (systemMessageContent) { messages.push({ role: 'system', content: systemMessageContent }); }
        messages.push({ role: 'user', content: promptInput });
        const chatCompletion = await groq.chat.completions.create({ messages: messages, model: model, temperature: 0.7, max_tokens: 2048 });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur lors de la g√©n√©ration de la r√©ponse IA (Groq model: ${model}):`, error);
        return 'Une erreur est survenue lors du traitement de votre demande. Veuillez r√©essayer plus tard.';
    }
}

// üõë NOUVELLE FONCTION : D√âTAIL DU MANIFESTE (I1.1)
async function getManifesteMarkdown() {
    return `üìú **Manifeste 910-2025 : Plateforme Citoyenne de Mobilisation**
\nNotre mouvement est une plateforme citoyenne pour la **Gr√®ve G√©n√©rale du 10 Septembre 2025** et la **Justice Sociale**.
\n### üéØ Nos Objectifs Cl√©s :
\n* **Boycottage √âconomique :** Mobiliser num√©riquement pour un boycottage massif des grandes enseignes (Leclerc, Carrefour, Lidl, Intermarch√©, etc.).
\n* **Caisse de Soutien :** Financer une caisse de manifestation o√π 100% des fonds seront r√©inject√©s dans les revenus des citoyens (objectif : +500‚Ç¨ √† +5000‚Ç¨).
\n* **R√©forme √âconomique :** D√©montrer l'ill√©galit√© des politiques √©conomiques actuelles via un mod√®le d'√©conomie circulaire.
\n* **R√©forme Politique (RIC) :** Promouvoir le R√©f√©rendum d'Initiative Citoyenne (RIC) pour la Justice Climatique, Sociale et une nouvelle proc√©dure de Destitution (Art. 68).
\n\nUtilisez la commande /greve pour les d√©tails pratiques de la mobilisation.`;
}

async function getDestitutionInfoMarkdown() {
    return `**La Proc√©dure de Destitution : L'Article 68 de la Constitution**
\nL'Article 68 de la Constitution fran√ßaise pr√©voit la possibilit√© de destituer le Pr√©sident de la R√©publique en cas de manquement √† ses devoirs manifestement incompatible avec l'exercice de son mandat.
\n https://petitions.assemblee-nationale.fr/initiatives/i-2743
\n\nNotre mouvement demande une application rigoureuse et transparente de cet article, et la mise en place de m√©canismes citoyens pour initier et suivre cette proc√©dure.
\nPour le moment, nous recueillons les avis et les soutiens via des sondages et des discussions au sein du bot.
`;
}
async function getRicInfoMarkdown() {
    return `**Le R√©f√©rendum d'Initiative Citoyenne (RIC) : Le C≈ìur de notre D√©mocratie !**
Le RIC est l'outil essentiel pour redonner le pouvoir aux citoyens. Il se d√©cline en plusieurs formes :
\n* **RIC L√©gislatif :** Proposer et voter des lois.
\n* **RIC Abrogatoire :** Annuler une loi existante.
\n* **RIC Constituant :** Modifier la Constitution.
\n* **RIC R√©vocatoire :** Destituer un √©lu.
\n\nC'est la garantie que notre voix sera directement entendue et respect√©e.
\nNous organisons des sondages r√©guliers et des d√©bats au sein du bot pour recueillir votre opinion et votre soutien sur le RIC. Utilisez la commande /sondage pour participer !
`;
}
async function getManifestationInfo() {
  try {
    const data = await dataService.getAllData();
    const infoManif = data.manifestation;

    return `üì¢ **Infos sur la manifestation :**\n\n` +
                  `**üóìÔ∏è Date :** ${infoManif.date}\n` +
                  `**üìç Lieu :** ${infoManif.lieu}\n` +
                  `**üéØ Objectif :** ${infoManif.objectifs}`;
  } catch (error) {
    console.error("Erreur pour r√©cup√©rer les infos de la manif via le service:", error);
    return "Impossible de r√©cup√©rer les informations sur la manifestation pour le moment.";
  }
}

// üõë FONCTION R√âCUP√âRATION DES STATISTIQUES DE LA CAISSE (I1.2)
async function getTreasuryStats() {
    try {
        const response = await axios.get(API_CAISSE_URL); 
        const caisseStats = response.data;

        if (!caisseStats || typeof caisseStats.solde === 'undefined') {
            return "‚ö†Ô∏è Le format des donn√©es de la caisse est invalide. V√©rifiez le serveur API.";
        }
        
        const objectif = caisseStats.objectif || 500000;
        const progression = ((caisseStats.solde / objectif) * 100).toFixed(2);
        const soldeFormatted = caisseStats.solde.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' });
        const objectifFormatted = objectif.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' });
        
        return `üí∞ **Statut de la Caisse de Manifestation**\n\n` +
               `**Solde Actuel :** ${soldeFormatted}\n` +
               `**Objectif :** ${objectifFormatted}\n` +
               `**Progression :** ${progression}%\n` +
               `**Contributeurs :** ${caisseStats.contributeurs?.toLocaleString('fr-FR') || 'N/A'}\n\n` +
               `*100% des fonds seront r√©inject√©s dans les revenus des citoyens apr√®s la gr√®ve.*`;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des stats de la caisse:", error.message);
        return "‚ùå Impossible de contacter l'API de la caisse. V√©rifiez le serveur Express.";
    }
}

// Exemple de commande CREATE
bot.command('addevent', async (ctx) => {
    const text = ctx.message.text.split(' ').slice(1).join(' ');
    if (!text) {
        return ctx.reply('Usage: /addevent [description de event 910 ]');
    }

    try {
        const eventData = {
            description: text,
            lieu: "Via Telegram",
            log: null,
            lat: null
        };
        const newEvent = await dataService.addElement('evenements', eventData);
        ctx.reply(`‚úÖ √âv√©nement ajout√© avec succ√®s !\nID: ${newEvent.id}`);
    } catch (error) {
        console.error(error);
        ctx.reply(`‚ùå Erreur lors de l'ajout de l'√©v√©nement : ${error.message}`);
    }
});
// --- CONTEXTES ET PROMPTS IA ---
const PLAINTE_PENALE_CONTEXT = `
Objet : Plainte P√©nale contre X (Fonctionnaires d'√âtat et Responsables Politiques) pour Infractions Criminelles et Abus d'Autorit√© (2017‚Äì2025).
Chefs d'Accusation : D√©tournement de Fonds Publics/Priv√©s, Prise Ill√©gale d'Int√©r√™t, Fraude aux Comptes de Campagne, Escroquerie, et Concertation R√©pression.
M√©canisme : Ruine √©conomique cibl√©e (7 ans de privation financi√®re) sous fa√ßade, masquant enrichissement ill√©gal et √âvasion Fiscale.
Contexte Criminel Aggravant : Abus li√© au projet "Accord de Paris" utilis√© comme arme de g√©o-ing√©nierie, financ√© par D√©tournement de Fonds. Accusation de Crime contre l'Humanit√©.
Exigences : Ouverture d'une Enqu√™te p√©nale, Composition P√©nale, Destitution, R√©paration Int√©grale.
`;

async function getCaricaturePrompt(topic) {
    const systemMessage = `
Tu es un g√©n√©rateur de descriptions d'images pour une IA. Tu dois cr√©er une description de caricature politique SATIRIQUE ET AGRESSIVE, en liant le sujet donn√© par l'utilisateur (Topic) au CONTEXTE de la PLAINTE P√âNALE ci-dessous.
R√®gles de Style : Style sombre, tr√®s contrast√© (type gravure ou dessin de presse), noir et blanc avec des touches de rouge sang.
CONTEXTE DE R√âF√âRENCE:
---
${PLAINTE_PENALE_CONTEXT}
---
Ta r√©ponse doit √™tre UNIQUEMENT la description de l'image (maximum 300 mots). Elle doit fusionner le 'Topic' avec les symboles visuels de la plainte (argent d√©tourn√©, tampons de r√©pression, justice bris√©e, chemtrails).
`;
    const prompt = `Le sujet de l'utilisateur ou le texte de r√©f√©rence √† caricaturer est : "${topic}".`;
    try {
        const chatCompletion = await groq.chat.completions.create({ messages: [{ role: 'system', content: systemMessage }, { role: 'user', content: prompt }], model: 'llama-3.1-8b-instant', temperature: 0.8 });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur Groq pour le prompt de caricature (contextualis√©):`, error);
        return `Caricature politique, sombre et contrast√©e (noir et blanc avec touches de rouge) repr√©sentant le sujet : "${topic}". Inclure des symboles de corruption, d'argent d√©tourn√©, et de justice bafou√©e.`;
    }
}

async function getImaginePromptContextualized(topic) {
    const systemMessage = `
Tu es un g√©n√©rateur de descriptions d'images pour une IA. Ton r√¥le est d'interpr√©ter le sujet donn√© par l'utilisateur (Topic) et de cr√©er une image VISUELLEMENT FORTE ET SYMBOLIQUE.
Utilise le CONTEXTE de la PLAINTE P√âNALE ci-dessous pour rendre l'image politiquement pertinente et profonde.
R√®gles de Style : Style photor√©aliste ou cin√©matographique, symbolique, focalis√© sur la justice, la d√©mocratie, ou la r√©sistance citoyenne. Pas de satire agressive forc√©e.
CONTEXTE DE R√âF√âRENCE:
---
${PLAINTE_PENALE_CONTEXT}
---
Ta r√©ponse doit √™tre UNIQUEMENT la description de l'image (maximum 300 mots). Elle doit lier le 'Topic' √† la th√©matique de la lutte contre la corruption ou pour la justice sociale.
`;
    const prompt = `Le sujet de l'utilisateur ou le texte de r√©f√©rence √† visualiser est : "${topic}".`;
    try {
        const chatCompletion = await groq.chat.completions.create({ messages: [{ role: 'system', content: systemMessage }, { role: 'user', content: prompt }], model: 'llama-3.1-8b-instant', temperature: 0.8 });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur Groq pour le prompt /imagine (contextualis√©):`, error);
        return `Image symbolique et percutante bas√©e sur le sujet : "${topic}". Repr√©sente une sc√®ne de r√©sistance citoyenne et d'exigence de justice, dans un style r√©aliste et fort.`;
    }
}
function getPlaintePenaleCaricaturePrompt() {
    return `Caricature dystopique et tr√®s agressive de satire politique, style gravure expressionniste, noir et blanc avec des touches de rouge sang et de vert bilieux.
    
    Repr√©sente des **fonctionnaires d'√âtat (silhouettes sombres portant des costumes de luxe)**, masqu√©s ou anonymes, qui sont assis sur une **pile de liasses de billets et de sacs d'argent vol√© (D√©tournement de Fonds Publics)**.
    
    Ces figures sont en train de **signer des ordres de R√©pression (tampons judiciaires/policiers)**, et l'un d'eux tient une **Ordonnance de Protection d√©chir√©e et ensanglant√©e** symbolisant l'Acharnement Judiciaire (2017-2025).
    
    En arri√®re-plan, le **Palais de Justice s'effondre**, et des nuages aux formes chimiques (chemtrails) s'√©chappent d'un **logo "Accord de Paris" d√©form√©**, symbolisant la g√©o-ing√©nierie, le **Crime contre l'Humanit√©** et les Actes mettant la vie d'autrui en danger.
    
    Le titre visible sur le mur d√©labr√© est : **"R√âPARATION INT√âGRALE"** avec le mot **"JUSTICE"** bris√© au sol.`;
}


// --- LOGIQUE SP√âCIFIQUE (Galerie, Topics) ---

/**
 * üõë FONCTION R√âUTILISABLE pour la galerie d'images.
 */
async function handleGalleryMenu(ctx) {
    const isCallback = ctx.callbackQuery !== undefined;

    if (isCallback) {
        await ctx.answerCbQuery();
    }

    try {
        const files = await fs.readdir(GALLERY_DIR);
        const imageFiles = files.filter(f => f.endsWith('.webp') || f.endsWith('.jpg') || f.endsWith('.png'));
        const totalCount = imageFiles.length;

        let statsMessage = `üìÇ **Galerie et Archives**\n\n`;
        statsMessage += `Total d'images cr√©√©es : **${totalCount}**`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('üñºÔ∏è Tout', 'view_gallery_page:0:ALL'),
                Markup.button.callback('üí• Caricature', 'view_gallery_page:0:caricature'),
                Markup.button.callback('‚ú® Imagine', 'view_gallery_page:0:imagine'),
            ],
            [Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')]
        ]);

        if (totalCount === 0) {
            statsMessage += `\n\nLancez la commande /caricature ou /imagine pour cr√©er la premi√®re image !`;
        } else {
            statsMessage += `\n\nS√©lectionnez le filtre pour voir les archives :`;
        }
        
        // Utilisation de editMessageText pour les callbacks pour un flux de menu propre
        if (isCallback) {
            await ctx.editMessageText(statsMessage, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
        } else {
            await ctx.replyWithMarkdown(statsMessage, keyboard);
        }

    } catch (error) {
        console.error('Erreur lors de l\'acc√®s √† la galerie:', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du chargement de la galerie.');
    }
}

/**
 * üõë FONCTION R√âUTILISABLE pour le menu des topics. (CORRIG√â)
 */
async function handleTopicsMenu(ctx) {
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    const keyboard = Markup.inlineKeyboard(keyboardRows);
    
    if (ctx.callbackQuery) {
        // √âditer le message pour afficher le menu Topics (flux de menu)
        await ctx.editMessageText(topicsMessage, { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup });
    } else {
        // R√©pondre avec un nouveau message (flux de commande /topics)
        await ctx.replyWithMarkdown(topicsMessage, keyboard);
    }
}


// --- ü§ñ GESTIONNAIRES DU BOT ü§ñ ---

// --- MENU PRINCIPAL START ---
bot.start(async (ctx) => {
    const payload = ctx.startPayload;
    const isPrivateChat = ctx.chat.type === 'private';
    
    let welcomeMessage = `Bonjour citoyen(ne) ! üëã\n\nBienvenue dans l'espace de mobilisation pour la **Gr√®ve G√©n√©rale du 10 Septembre 2025** et la **Justice Sociale** ! Je suis votre assistant pour le mouvement.`;
    if (payload) { welcomeMessage += `\n\nVous √™tes arriv√© via un lien d'invitation : \`${payload}\`. Merci de rejoindre notre cause !`; }
    welcomeMessage += `\n\nComment puis-je vous aider √† vous informer et √† vous engager ?`;
    
    let webAppButton;
    if (isPrivateChat) {
        webAppButton = Markup.button.webApp('üåê Ouvrir l\'Application Web (TWA)', WEB_APP_TWA_URL);
    } else {
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web', WEB_APP_URL);
    }

    const inlineKeyboard = Markup.inlineKeyboard([
        [webAppButton],
        [Markup.button.callback('üìú Le Manifeste', 'show_manifest')],
        [Markup.button.callback('üîó Salons de Discussion (Topics)', 'show_topics_menu')],
        [Markup.button.callback('ü§ñ Outils IA & Cr√©ation', 'ai_tools_menu')],
        [Markup.button.callback('‚ùì Aide & Commandes', 'show_help')]
    ]);
    
    await ctx.replyWithMarkdown(welcomeMessage, inlineKeyboard);
});

// GESTIONNAIRE D'ACTION POUR RETOURNER AU MENU PRINCIPAL
bot.action('start_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const isPrivateChat = ctx.chat.type === 'private';
    
    let webAppButton;
    if (isPrivateChat) {
        webAppButton = Markup.button.webApp('üåê Ouvrir l\'Application Web (TWA)', WEB_APP_TWA_URL);
    } else {
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web', WEB_APP_URL);
    }

    const inlineKeyboard = Markup.inlineKeyboard([
        [webAppButton],
        [Markup.button.callback('üìú Le Manifeste', 'show_manifest')],
        [Markup.button.callback('üîó Salons de Discussion (Topics)', 'show_topics_menu')],
        [Markup.button.callback('ü§ñ Outils IA & Cr√©ation', 'ai_tools_menu')],
        [Markup.button.callback('‚ùì Aide & Commandes', 'show_help')]
    ]);
    
    await ctx.editMessageText(`Bonjour citoyen(ne) ! üëã\n\nBienvenue dans l'espace de mobilisation. Comment puis-je vous aider √† vous informer et √† vous engager ?`, { parse_mode: 'Markdown', reply_markup: inlineKeyboard.reply_markup });
});

// --- COMMANDES DE BASE ET D'INFO ---
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /user, /manifeste, /ric, /destitution, /greve, /caisse, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

// üõë COMMANDE /MANIFESTE MISE √Ä JOUR (I1.1)
bot.command('manifeste', async (ctx) => { 
    await ctx.replyWithMarkdown(await getManifesteMarkdown()); 
});

bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });
bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});

// üõë COMMANDE /CAISSE (Impl√©ment√©e √† l'√©tape pr√©c√©dente)
bot.command('caisse', async (ctx) => {
    await ctx.replyWithChatAction('typing');
    await ctx.replyWithMarkdown(await getTreasuryStats());
});

// --- COMMANDES WEB ET NAVIGATION ---
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;
    if (isPrivateChat) {
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_TWA_URL);
    } else {
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_URL);
    }
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([[webAppButton]]));
});
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([[Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_URL)]]));
});
// üõë UTILISATION DE LA FONCTION CORRIG√âE
bot.command('topics', handleTopicsMenu);
bot.action('show_topics_menu', async (ctx) => { await ctx.answerCbQuery(); await handleTopicsMenu(ctx); });


// --- COMMANDES DE COMPTE ET CONTACT ---
bot.command('user', async (ctx) => {
    await ctx.replyWithChatAction('typing');
    const telegramId = ctx.from.id;
    
    try {
        const response = await axios.get(`${API_BASE_URL}/by-telegram-id/${telegramId}`);
        const userProfile = response.data;
        let message = `üë§ **Gestion de Mon Compte Citoyen**\n\n`;
        if (userProfile) {
            message += `‚úÖ **Profil Citoyen Actif**\n`;
            message += `**Nom : ${userProfile.name || 'N/A'}**\n`;
            message += `\n*ID Citoyen (UUID) :* \`${userProfile.id}\``;
            message += `\n*Score CVNU :* **${userProfile.cv_score || 'N/A'}**`;
        }
        const inlineKeyboard = Markup.inlineKeyboard([
            [Markup.button.url('üåê G√©rer (Web App)', WEB_APP_URL)],
            [Markup.button.callback('‚ùì API de Gestion du Compte', 'user_api_info')]
        ]);
        await ctx.replyWithMarkdown(message, inlineKeyboard);
    } catch (error) {
        let message = `üë§ **Gestion de Mon Compte Citoyen**\n\n`;
        if (error.response && error.response.status === 404) {
            message += `**Statut : Profil citoyen non enregistr√©.**\n\n`;
            message += `Votre ID Telegram (**${telegramId}**) n'est pas encore li√© √† un compte.`;
            message += `\n\n‚û°Ô∏è **Action :** Veuillez vous inscrire via l'Application Web.`;
        } else {
            message += `‚ùå Connexion √©chou√©e : Le service de gestion des comptes est inaccessible.`;
            console.error('Erreur API user:', error.message);
        }
        const inlineKeyboard = Markup.inlineKeyboard([[Markup.button.url('üåê Proc√©der √† l\'Inscription', WEB_APP_URL)]]);
        await ctx.replyWithMarkdown(message, inlineKeyboard);
    }
});
bot.action('user_api_info', async (ctx) => {
    await ctx.answerCbQuery();
    const infoMessage = `
**D√©tails de l'API de Gestion de Compte Citoyen (Endpoints)**

* **Cr√©er :** \`POST /api/beneficiaries/register\` (Doit inclure \`telegram_id\`)
* **Lire par Telegram ID :** \`GET /api/beneficiaries/by-telegram-id/:telegramId\`
* **Lire tous :** \`GET /api/beneficiaries\`
* **Modifier :** \`PUT /api/beneficiaries/:id\`
    `;
    await ctx.replyWithMarkdown(infoMessage);
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    
    const chatId = ORGANIZER_GROUP_ID_CHAT;
    
    if (chatId) {
        try {
            await bot.telegram.sendMessage(chatId, `**Nouveau message de contact :**\n\nDe : ${ctx.from.first_name} (${ctx.from.username ? '@' + ctx.from.username : 'ID: ' + ctx.from.id})\n\nMessage :\n${messageContent}`, { parse_mode: 'Markdown' });
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { 
            console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); 
            await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. (ID de groupe incorrect ou erreur d\'API)'); 
        }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});

// --- COMMANDES IA (G√©n√©ration d'images) ---
bot.command('galerie', handleGalleryMenu);
bot.action('gallery_menu', handleGalleryMenu); 
bot.action('ai_tools_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const toolsMessage = `ü§ñ **Outils IA et Cr√©ation**\n\nChoisissez un outil pour g√©n√©rer du contenu ou acc√©der aux archives cr√©√©es par le mouvement :`;
    const inlineKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üñºÔ∏è G√©n√©rateur d\'Images (Caricature/Imagine)', 'generator_submenu')],
        [Markup.button.callback('üìÇ Galerie & Archives', 'gallery_menu')],
        [Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]
    ]);
    await ctx.editMessageText(toolsMessage, { parse_mode: 'Markdown', reply_markup: inlineKeyboard.reply_markup });
});
bot.action('generator_submenu', async (ctx) => {
    await ctx.answerCbQuery();
    const generatorMessage = `üñºÔ∏è **G√©n√©rateur d'Images**\n\nQuel type de contenu visuel souhaitez-vous cr√©er ?`;
    const inlineKeyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback('üí• Caricature Politique', 'info_caricature'),
            Markup.button.callback('‚ú® Image Libre (Imagine)', 'info_imagine')
        ],
        [
            Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')
        ]
    ]);
    await ctx.editMessageText(generatorMessage, { parse_mode: 'Markdown', reply_markup: inlineKeyboard.reply_markup });
});
bot.action('info_caricature', async (ctx) => {
    await ctx.answerCbQuery();
    const infoMessage = `**üí• Caricature Politique :**

Utilisez la commande \`/caricature [votre sujet]\` pour cr√©er une image satirique et politique percutante.

‚ú® **NOUVEAU !** Pour la caricature bas√©e sur la Plainte P√©nale contre X, utilisez directement la commande : \`/caricature_plainte\`

Voici 5 exemples de sujets... (d√©tails omis pour la concision).`;
    await ctx.replyWithMarkdown(infoMessage);
});
bot.action('info_imagine', async (ctx) => {
    await ctx.answerCbQuery();
    const infoMessage = `*‚ú® Image Libre (Imagine) :*
    
Utilisez la commande \`/imagine [votre description]\` pour cr√©er n'importe quelle image bas√©e sur une description libre.
    
**Rappel :** Cette commande contextualise votre sujet avec les th√©matiques de la Plainte P√©nale (Justice, R√©sistance Citoyenne) pour une meilleure pertinence.`;
    await ctx.replyWithMarkdown(infoMessage);
});

// GESTIONNAIRE DE PAGINATION DE LA GALERIE (Code inchang√©, il √©tait d√©j√† fonctionnel)
bot.action(/view_gallery_page:(\d+):([a-zA-Z]+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    const filter = ctx.match[2];
    await ctx.answerCbQuery(`Chargement de la page ${page + 1} (Filtre: ${filter})...`);
    
    const chatId = ctx.chat.id;
    const threadId = ctx.callbackQuery.message.message_thread_id;
    const messageId = ctx.callbackQuery.message.message_id;

    try {
        const files = await fs.readdir(GALLERY_DIR);
        let allImageFiles = files.filter(f => f.endsWith('.webp') || f.endsWith('.jpg') || f.endsWith('.png'));
        allImageFiles.sort((a, b) => b.localeCompare(a)); // Tri du plus r√©cent au plus ancien

        if (filter !== 'ALL') {
            allImageFiles = allImageFiles.filter(f => f.startsWith(filter));
        }

        const totalCount = allImageFiles.length;
        const totalPages = Math.ceil(totalCount / IMAGES_PER_PAGE);

        if (totalCount === 0 || page < 0 || page >= totalPages) {
              await ctx.telegram.editMessageText(chatId, messageId, undefined,
                  `*üñºÔ∏è Archives (Page ${page + 1} / ${totalPages})* \n\nAucune archive trouv√©e pour le filtre **${filter.toUpperCase()}**.`,
                  { parse_mode: 'Markdown', reply_markup: Markup.inlineKeyboard([
                      [Markup.button.callback('Retour aux Filtres', 'gallery_menu')]
                  ]).reply_markup }
              );
              return;
        }
        
        const start = page * IMAGES_PER_PAGE;
        const end = start + IMAGES_PER_PAGE;
        const imagesOnPage = allImageFiles.slice(start, end);

        const mediaGroup = await Promise.all(imagesOnPage.map(async (fileName, index) => {
            const filePath = path.join(GALLERY_DIR, fileName);
            const imageBuffer = await fs.readFile(filePath);
            const fileType = fileName.split('_')[0];
            const timestamp = parseInt(fileName.split('_')[1]);
            const fileDate = new Date(timestamp).toLocaleDateString('fr-FR');

            return {
                type: 'photo',
                media: { source: imageBuffer },
                caption: (index === 0) ? `üñºÔ∏è Page ${page + 1}/${totalPages} | Type: ${fileType.toUpperCase()} (${fileDate})` : undefined,
                parse_mode: 'Markdown'
            };
        }));
        
        const navButtons = [];
        if (page > 0) { navButtons.push(Markup.button.callback('‚óÄÔ∏è Pr√©c√©dent', `view_gallery_page:${page - 1}:${filter}`)); }
        navButtons.push(Markup.button.callback(`Filtre: ${filter.toUpperCase()}`, `gallery_menu`)); 
        if (page < totalPages - 1) { navButtons.push(Markup.button.callback('Suivant ‚ñ∂Ô∏è', `view_gallery_page:${page + 1}:${filter}`)); }

        const keyboard = Markup.inlineKeyboard([
            navButtons,
            [Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')]
        ]);

        await ctx.telegram.sendMediaGroup(chatId, mediaGroup, { message_thread_id: threadId });
        
        await ctx.telegram.editMessageText(chatId, messageId, undefined,
            `*üñºÔ∏è Archives (Filtre: ${filter.toUpperCase()}, Page ${page + 1}/${totalPages})* \n\nLes ${imagesOnPage.length} archives ont √©t√© envoy√©es ci-dessus.`,
            { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup }
        );

    } catch (error) {
        console.error('Erreur fatale lors de la pagination de la galerie:', error);
        await ctx.reply('‚ùå Impossible de charger cette page des archives. (Veuillez recommencer depuis le menu IA).', Markup.inlineKeyboard([
            [Markup.button.callback('Retour √† la Galerie', 'gallery_menu')]
        ]));
    }
});

// --- COMMANDES DE G√âN√âRATION D'IMAGES ---
// COMMANDE /CARICATURE
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    if (!topic) { await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`'); return; }
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });
        const imageDescription = await getCaricaturePrompt(topic);
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                await saveGeneratedImage(imageData, 'caricature');
                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' });
                imageSent = true; break;
            }
        }
        if (!imageSent) { await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.'); }
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// COMMANDE /CARICATURE_PLAINTE
bot.command('caricature_plainte', async (ctx) => {
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                await saveGeneratedImage(imageData, 'plainte_caricature');
                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' });
                imageSent = true; break;
            }
        }
        if (!imageSent) { await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.'); }
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// COMMANDE /AI_VISION (Utilise le m√™me prompt fixe que /caricature_plainte)
bot.command('ai_vision', async (ctx) => {
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Vision IA de la Plainte P√©nale";
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                await saveGeneratedImage(imageData, 'ai_vision');
                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Vision IA g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' });
                imageSent = true; break;
            }
        }
        if (!imageSent) { await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.'); }
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de /ai_vision (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation d\'image.');
    }
});

// COMMANDE /IMAGINE
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    if (!topic) { await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. Voici quelques exemples...`); return; }
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });
        const imageDescription = await getImaginePromptContextualized(topic);
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                await saveGeneratedImage(imageData, 'imagine');
                await ctx.replyWithPhoto({ source: imageBuffer });
                imageSent = true; return;
            }
        }
        if (!imageSent) { await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.'); }
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


// --- GESTIONNAIRES DE SONDAGE ET TEXTE ---
bot.command('create_poll', async (ctx) => {
    await ctx.reply("Pour cr√©er un sondage, veuillez utiliser la commande: `/sondage Question ? Option 1 | Option 2 | Option 3`");
});

bot.command('sondage', async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1).join(' ');
    const parts = args.split('?');
    if (parts.length < 2) { return ctx.reply("Format invalide. Utilisez: `/sondage Question ? Option 1 | Option 2 | Option 3`"); }
    const question = parts[0].trim() + (parts[0].trim().endsWith('?') ? '' : '?');
    const options = parts.slice(1).join('?').trim().split('|').map(opt => opt.trim()).filter(opt => opt.length > 0);
    
    if (options.length < 2) { return ctx.reply("Veuillez fournir au moins deux options s√©par√©es par un `|`."); }
    
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
        await ctx.reply("‚úÖ Sondage cr√©√© et enregistr√© !");
    } catch (error) { 
        console.error('Erreur lors de la cr√©ation du sondage:', error); 
        await ctx.reply("‚ùå Une erreur est survenue lors de la cr√©ation du sondage.");
    }
});

bot.on('poll_answer', async (ctx) => {
    const messageId = ctx.pollAnswer.poll_id;
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId.toString() === messageId.toString());
    
    if (pollIndex !== -1) {
        // Logique de mise √† jour des votes simplifi√©e (√† affiner pour la gestion des changements de vote)
        db.polls[pollIndex].options.forEach((opt, index) => {
             opt.votes = ctx.pollAnswer.option_ids.includes(index) ? (opt.votes + 1) : opt.votes; 
        });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});

bot.on('text', async (ctx) => {
    try {
        // Mise √† jour des stats pour tous les messages
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }

    // Ignorer si c'est une commande
    if (ctx.message.text.startsWith('/')) { return; }

    // Logique de conversation IA
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});

// GESTIONNAIRE DE MOT-CL√â (Manifestation)
bot.on('message', async (ctx) => {
    if (ctx.message.text && ctx.message.text.toLowerCase().includes('manifestation')) {
        const response = await getManifestationInfo();
        ctx.reply(response);
    }
});

// --- MISE √Ä JOUR DU MENU DES COMMANDES OFFICIELLES ---
async function setBotCommands() {
     commands = [
        { command: 'start', description: 'Revenir au menu principal.' },
        { command: 'user', description: 'G√©rer votre compte citoyen.' },
        { command: 'web', description: 'Lancer l\'Application Web Telegram (TWA).' },
        { command: 'app', description: 'Acc√®s direct √† l\'Application Web (Lien simple).' },
        { command: 'manifeste', description: 'Lire un extrait du manifeste.' },
        { command: 'topics', description: 'Acc√©der aux salons de discussion Telegram.' },
        { command: 'ric', description: 'Tout savoir sur le R√©f√©rendum d\'Initiative Citoyenne.' },
        { command: 'destitution', description: 'Comprendre la proc√©dure de destitution.' },
        { command: 'greve', description: 'Infos pratiques sur la Gr√®ve du 10 Septembre 2025.' },
        { command: 'caisse', description: 'Afficher le statut de la Caisse de Manifestation.' }, // üëà NOUVEAU
        { command: 'galerie', description: 'Acc√©der √† la galerie des images g√©n√©r√©es.' },
        { command: 'imagine', description: 'G√©n√©rer une image libre via l\'IA.' },
        { command: 'caricature', description: 'G√©n√©rer une caricature politique via l\'IA.' },
        { command: 'caricature_plainte', description: 'Caricature auto. sur la Plainte P√©nale.' },
        { command: 'ai_vision', description: 'Vision IA sur la Plainte P√©nale.' },
        { command: 'sondage', description: 'Cr√©er un nouveau sondage.' },
        { command: 'contact', description: 'Contacter les organisateurs.' },
        { command: 'stats', description: 'Afficher les statistiques du bot.' },
        { command: 'help', description: 'Afficher toutes les commandes.' },
    ];
    
    try {
        await bot.telegram.setMyCommands(commands);
        console.log("‚úÖ Commandes officielles du bot mises √† jour sur Telegram.");
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour des commandes du bot:", error.message);
    }
}

// Optionnel: Appeler la fonction lors de l'initialisation du module
setBotCommands();

module.exports = {
    launch: () => bot.launch(), 
    bot: bot, 
    commands, // La liste des commandes pour le build script
    topicLinks: TOPIC_LINKS // Les liens des topics pour le build script
};