// Fichier : routes/telegramRouter.js (VERSION FINALE AVEC CORRECTION HTTPS WEB APP ET MISE √Ä JOUR DU MENU DES COMMANDES)

const { Telegraf, Markup } = require('telegraf');
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const fs = require('fs/promises');
const Groq = require('groq-sdk');
const { GoogleGenerativeAI } = require('@google/generative-ai');

// --- CONSTANTES ET VARIABLES GLOBALES ---
const STATS_FILE = path.join(__dirname, '..', 'data', 'stats.json');
const DATABASE_FILE_PATH = path.join(__dirname, '..', 'data', 'database.json');

// üõë CONSTANTES D'ACC√àS WEB (CORRIG√âES)
const GIT_APP_HTTPS_URL = 'https://ia-local.github.io/d-bloquons_tout/'; // URL HTTPS pour WebApp et lien simple
const WEB_APP_HTTPS_URL = 't.me/Pi_ia_Pibot/Manifest_910'; // URL HTTPS pour WebApp et lien simple
const TELEGRAM_WEB_APP_LAUNCH_LINK = 't.me/Pi_ia_Pibot/Manifest_910'; // Lien t.me pour r√©f√©rence (non utilis√© pour Markup.button.webApp)

const ORGANIZER_GROUP_ID_CHAT = "-100123456789"; // ID de chat d'organisateurs (simul√©/√† configurer)

const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const TELEGRAM_API_KEY = process.env.TELEGRAM_API_KEY || '7281441282:AAGA5F0nRyEsBKIfQOGcAjelkE3DA8IWByU';

// üõë CONSTANTES DE NAVIGATION ET DE PAGINATION
const GALLERY_DIR = path.join(__dirname, '..', 'data', 'galerie');
const IMAGES_PER_PAGE = 4; // Affichage de 4 images par page dans le diaporama

const TOPIC_LINKS = {
    'üé® Application web': 't.me/Pi_ia_Pibot/Manifest_910',
    'üé® Studio (Cr√©ation)': 'https://t.me/c/2803900118/1232',
    'üìù Revendication (D√©tails)': 'https://t.me/c/2803900118/3',
    'üó≥Ô∏è RIC (R√©f√©rendum)': 'https://t.me/c/2803900118/329',
    'üë• Organisation (Planning)': 'https://t.me/c/2803900118/2',
    'üó∫Ô∏è Cartes (Ralliement)': 'https://t.me/c/2803900118/991',
    'üìÑ Documents (L√©gislation)': 'https://t.me/c/2803900118/13',
    'üìû Contacts (Presse/√âlus)': 'https://t.me/c/2803900118/8',
    '‚öñÔ∏è Auditions Libres': 'https://t.me/c/2803900118/491'
};

// Initialisations des services
const groq = new Groq({ apiKey: GROQ_API_KEY });
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const bot = new Telegraf(TELEGRAM_API_KEY, {
    telegram: { webhookReply: true }
});
let database = {};

// --- FONCTIONS UTILITAIRES (pour l'autonomie du module) ---
async function readJsonFile(filePath, defaultValue = {}) {
    try {
        await fs.mkdir(path.dirname(filePath), { recursive: true });
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.writeFile(filePath, JSON.stringify(defaultValue, null, 2), 'utf8');
            return defaultValue;
        }
        console.error(`Erreur de lecture du fichier ${filePath}:`, error);
        return defaultValue;
    }
}
async function writeJsonFile(filePath, data) {
    try {
        await fs.mkdir(path.dirname(filePath), { recursive: true });
        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
        console.error(`Erreur d'√©criture du fichier ${filePath}:`, error);
    }
}

/**
 * üõë FONCTION : Sauvegarde l'image g√©n√©r√©e dans le dossier data/galerie.
 */
async function saveGeneratedImage(imageDataBase64, type) {
    try {
        await fs.mkdir(GALLERY_DIR, { recursive: true });
        // Utiliser Date.now() pour garantir l'unicit√© et le tri
        const fileName = `${type}_${Date.now()}.webp`; 
        const filePath = path.join(GALLERY_DIR, fileName);
        const imageBuffer = Buffer.from(imageDataBase64, 'base64');
        await fs.writeFile(filePath, imageBuffer);
        console.log(`üñºÔ∏è Image sauvegard√©e : ${filePath}`);
    } catch (error) {
        console.error(`Erreur lors de la sauvegarde de l'image dans la galerie:`, error);
    }
}


async function getGroqChatResponse(promptInput, model, systemMessageContent) {
    try {
        const messages = [];
        if (systemMessageContent) { messages.push({ role: 'system', content: systemMessageContent }); }
        messages.push({ role: 'user', content: promptInput });
        const chatCompletion = await groq.chat.completions.create({ messages: messages, model: model, temperature: 0.7, max_tokens: 2048 });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur lors de la g√©n√©ration de la r√©ponse IA (Groq model: ${model}):`, error);
        return 'Une erreur est survenue lors du traitement de votre demande. Veuillez r√©essayer plus tard.';
    }
}
async function getDestitutionInfoMarkdown() {
    return `**La Proc√©dure de Destitution : L'Article 68 de la Constitution**
\nL'Article 68 de la Constitution fran√ßaise pr√©voit la possibilit√© de destituer le Pr√©sident de la R√©publique en cas de manquement √† ses devoirs manifestement incompatible avec l'exercice de son mandat.
\n https://petitions.assemblee-nationale.fr/initiatives/i-2743
\n\nNotre mouvement demande une application rigoureuse et transparente de cet article, et la mise en place de m√©canismes citoyens pour initier et suivre cette proc√©dure.
\nPour le moment, nous recueillons les avis et les soutiens via des sondages et des discussions au sein du bot.
`;
}
async function getRicInfoMarkdown() {
    return `**Le R√©f√©rendum d'Initiative Citoyenne (RIC) : Le C≈ìur de notre D√©mocratie !**
Le RIC est l'outil essentiel pour redonner le pouvoir aux citoyens. Il se d√©cline en plusieurs formes :
\n* **RIC L√©gislatif :** Proposer et voter des lois.
\n* **RIC Abrogatoire :** Annuler une loi existante.
\n* **RIC Constituant :** Modifier la Constitution.
\n* **RIC R√©vocatoire :** Destituer un √©lu.
\n\nC'est la garantie que notre voix sera directement entendue et respect√©e.
\nNous organisons des sondages r√©guliers et des d√©bats au sein du bot pour recueillir votre opinion et votre soutien sur le RIC. Utilisez la commande /sondage pour participer !
`;
}
async function getManifestationInfo() {
  const info = `Voici quelques informations sur la manifestation : \n\n` +
               `**Date :** 10 Septembre 2025\n` +
               `**Objectif :** Gr√®ve G√©n√©rale pour la Justice Sociale\n` +
               `**Points de ralliement :** Paris (Place de la R√©publique), Lyon (Place Bellecour), Marseille (Vieux-Port). D'autres lieux seront annonc√©s prochainement.`;
  return info;
}

/**
 * Texte de r√©f√©rence complet de la plainte p√©nale (utilis√© pour donner du contexte √† l'IA).
 */
const PLAINTE_PENALE_CONTEXT = `
Objet : Plainte P√©nale contre X (Fonctionnaires d'√âtat et Responsables Politiques) pour Infractions Criminelles et Abus d'Autorit√© (2017‚Äì2025).
Chefs d'Accusation : D√©tournement de Fonds Publics/Priv√©s, Prise Ill√©gale d'Int√©r√™t, Fraude aux Comptes de Campagne, Escroquerie, et Concertation R√©pression.
M√©canisme : Ruine √©conomique cibl√©e (7 ans de privation financi√®re) sous fa√ßade, masquant enrichissement ill√©gal et √âvasion Fiscale.
Contexte Criminel Aggravant : Abus li√© au projet "Accord de Paris" utilis√© comme arme de g√©o-ing√©nierie, financ√© par D√©tournement de Fonds. Accusation de Crime contre l'Humanit√©.
Exigences : Ouverture d'une Enqu√™te p√©nale, Composition P√©nale, Destitution, R√©paration Int√©grale.
`;

/**
 * Fonction utilitaire pour g√©n√©rer la description de l'image de caricature via Groq.
 * Style : SATIRIQUE ET AGRESSIF.
 */
async function getCaricaturePrompt(topic) {
    const systemMessage = `
Tu es un g√©n√©rateur de descriptions d'images pour une IA. Tu dois cr√©er une description de caricature politique SATIRIQUE ET AGRESSIVE, en liant le sujet donn√© par l'utilisateur (Topic) au CONTEXTE de la PLAINTE P√âNALE ci-dessous.

R√®gles de Style : Style sombre, tr√®s contrast√© (type gravure ou dessin de presse), noir et blanc avec des touches de rouge sang.

CONTEXTE DE R√âF√âRENCE:
---
${PLAINTE_PENALE_CONTEXT}
---

Ta r√©ponse doit √™tre UNIQUEMENT la description de l'image (maximum 300 mots). Elle doit fusionner le 'Topic' avec les symboles visuels de la plainte (argent d√©tourn√©, tampons de r√©pression, justice bris√©e, chemtrails).
`;
    const prompt = `Le sujet de l'utilisateur ou le texte de r√©f√©rence √† caricaturer est : "${topic}".`;

    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [{ role: 'system', content: systemMessage }, { role: 'user', content: prompt }],
            model: 'llama-3.1-8b-instant', 
            temperature: 0.8
        });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur Groq pour le prompt de caricature (contextualis√©):`, error);
        return `Caricature politique, sombre et contrast√©e (noir et blanc avec touches de rouge) repr√©sentant le sujet : "${topic}". Inclure des symboles de corruption, d'argent d√©tourn√©, et de justice bafou√©e.`;
    }
}


/**
 * Fonction utilitaire pour g√©n√©rer la description de l'image pour /imagine.
 * Style : SYMBOLIQUE ET CIN√âMATOGRAPHIQUE.
 */
async function getImaginePromptContextualized(topic) {
    const systemMessage = `
Tu es un g√©n√©rateur de descriptions d'images pour une IA. Ton r√¥le est d'interpr√©ter le sujet donn√© par l'utilisateur (Topic) et de cr√©er une image VISUELLEMENT FORTE ET SYMBOLIQUE. 
Utilise le CONTEXTE de la PLAINTE P√âNALE ci-dessous pour rendre l'image politiquement pertinente et profonde.

R√®gles de Style : Style photor√©aliste ou cin√©matographique, symbolique, focalis√© sur la justice, la d√©mocratie, ou la r√©sistance citoyenne. Pas de satire agressive forc√©e.

CONTEXTE DE R√âF√âRENCE:
---
${PLAINTE_PENALE_CONTEXT}
---

Ta r√©ponse doit √™tre UNIQUEMENT la description de l'image (maximum 300 mots). Elle doit lier le 'Topic' √† la th√©matique de la lutte contre la corruption ou pour la justice sociale.
`;
    const prompt = `Le sujet de l'utilisateur ou le texte de r√©f√©rence √† visualiser est : "${topic}".`;

    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [{ role: 'system', content: systemMessage }, { role: 'user', content: prompt }],
            model: 'llama-3.1-8b-instant', 
            temperature: 0.8
        });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur Groq pour le prompt /imagine (contextualis√©):`, error);
        return `Image symbolique et percutante bas√©e sur le sujet : "${topic}". Repr√©sente une sc√®ne de r√©sistance citoyenne et d'exigence de justice, dans un style r√©aliste et fort.`;
    }
}


/**
 * Prompt fixe et agressif pour g√©n√©rer une caricature IA bas√©e sur le texte de la plainte p√©nale.
 */
function getPlaintePenaleCaricaturePrompt() {
    return `Caricature dystopique et tr√®s agressive de satire politique, style gravure expressionniste, noir et blanc avec des touches de rouge sang et de vert bilieux. 
    
    Repr√©sente des **fonctionnaires d'√âtat (silhouettes sombres portant des costumes de luxe)**, masqu√©s ou anonymes, qui sont assis sur une **pile de liasses de billets et de sacs d'argent vol√© (D√©tournement de Fonds Publics)**. 
    
    Ces figures sont en train de **signer des ordres de R√©pression (tampons judiciaires/policiers)**, et l'un d'eux tient une **Ordonnance de Protection d√©chir√©e et ensanglant√©e** symbolisant l'Acharnement Judiciaire (2017-2025).
    
    En arri√®re-plan, le **Palais de Justice s'effondre**, et des nuages aux formes chimiques (chemtrails) s'√©chappent d'un **logo "Accord de Paris" d√©form√©**, symbolisant la g√©o-ing√©nierie, le **Crime contre l'Humanit√©** et les Actes mettant la vie d'autrui en danger.
    
    Le titre visible sur le mur d√©labr√© est : **"R√âPARATION INT√âGRALE"** avec le mot **"JUSTICE"** bris√© au sol.`;
}

// --- FONCTION DE LOGIQUE R√âUTILISABLE POUR LE MENU GALERIE ---
async function handleGalleryMenu(ctx) {
    const isCallback = ctx.callbackQuery !== undefined;

    if (isCallback) {
        // NOTE: On n'appelle pas answerCbQuery ici pour le moment, car on r√©pond avec un message
        // L'appel de pagination le fera
    }

    try {
        const files = await fs.readdir(GALLERY_DIR);
        const imageFiles = files.filter(f => f.endsWith('.webp') || f.endsWith('.jpg') || f.endsWith('.png'));
        const totalCount = imageFiles.length;

        let replyMessage = `üìÇ **Galerie et Archives**\n\n`;
        replyMessage += `Total d'images cr√©√©es : **${totalCount}**`;

        if (totalCount === 0) {
            replyMessage += `\n\nLancez la commande /caricature ou /imagine pour cr√©er la premi√®re image !`;
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')]
            ]);
            
            await ctx.replyWithMarkdown(replyMessage, keyboard);
            return;
        }

        // --- Affichage du menu de filtrage (√©tape pr√©liminaire) ---
        
        let statsMessage = `Total d'images cr√©√©es : **${totalCount}**\n\nS√©lectionnez le filtre pour voir les archives :`;

        const filterButtons = [
            Markup.button.callback('üñºÔ∏è Tout', 'view_gallery_page:0:ALL'),
            Markup.button.callback('üí• Caricature', 'view_gallery_page:0:caricature'),
            Markup.button.callback('‚ú® Imagine', 'view_gallery_page:0:imagine'),
        ];

        const keyboard = Markup.inlineKeyboard([
            filterButtons,
            [Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')]
        ]);

        await ctx.replyWithMarkdown(statsMessage, keyboard);
        
    } catch (error) {
        console.error('Erreur lors de l\'acc√®s √† la galerie:', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du chargement de la galerie.');
    }
}


// --- ü§ñ EXPORTATION DE LA LOGIQUE DU BOT ü§ñ ---

// --- MENU PRINCIPAL START (CORRIG√â POUR G√âRER LES GROUPES/TOPICS) ---
bot.start(async (ctx) => {
    const payload = ctx.startPayload;
    const isPrivateChat = ctx.chat.type === 'private';
    
    let welcomeMessage = `Bonjour citoyen(ne) ! üëã\n\nBienvenue dans l'espace de mobilisation pour la **Gr√®ve G√©n√©rale du 10 Septembre 2025** et la **Justice Sociale** ! Je suis votre assistant pour le mouvement.`;
    if (payload) { welcomeMessage += `\n\nVous √™tes arriv√© via un lien d'invitation : \`${payload}\`. Merci de rejoindre notre cause !`; }
    welcomeMessage += `\n\nComment puis-je vous aider √† vous informer et √† vous engager ?`;
    
    // üõë LOGIQUE DE S√âLECTION DU BOUTON POUR √âVITER BUTTON_TYPE_INVALID
    let webAppButton;
    if (isPrivateChat) {
        // WebApp natif (privil√©gi√© dans les chats priv√©s)
        webAppButton = Markup.button.webApp('üåê Ouvrir l\'Application Web (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Bouton URL simple (universellement compatible, utilis√© dans les groupes/topics)
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web', WEB_APP_HTTPS_URL);
    }

    const inlineKeyboard = Markup.inlineKeyboard([
        // üõë Utilisation du bouton choisi
        [webAppButton], 
        
        [Markup.button.callback('üìú Le Manifeste', 'show_manifest')],
        [Markup.button.callback('üîó Salons de Discussion (Topics)', 'show_topics_menu')], 
        [Markup.button.callback('ü§ñ Outils IA & Cr√©ation', 'ai_tools_menu')], 
        [Markup.button.callback('‚ùì Aide & Commandes', 'show_help')]
    ]);
    
    await ctx.replyWithMarkdown(welcomeMessage, inlineKeyboard);
});

// --- GESTIONNAIRES DE COMMANDES ET ACTIONS ---

// üõë COMMANDE /GALERIE (CORRIG√âE : APPEL DE LA LOGIQUE INTERNE)
bot.command('galerie', handleGalleryMenu);
bot.action('gallery_menu', handleGalleryMenu); // L'action appelle la m√™me logique

// --- NOUVEAU GESTIONNAIRE DE MENU TOPICS ---
bot.action('show_topics_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    // Convertir l'objet TOPIC_LINKS en une liste de boutons
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    // Regrouper les boutons par paires
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('start_menu', async (ctx) => { await ctx.answerCbQuery(); await bot.start(ctx); });
bot.action('show_manifest', async (ctx) => {
    await ctx.answerCbQuery();
    const manifestoContent = `**Extrait du Manifeste 'Le 10 Septembre' :**
Notre mouvement est n√© de la conviction que la R√©publique doit retrouver ses valeurs de justice sociale, de d√©mocratie directe et de transparence. Nous exigeons :
\n1.  **L'instauration du R√©f√©rendum d'Initiative Citoyenne (RIC)** dans toutes ses formes (l√©gislatif, abrogatoire, constituant, r√©vocatoire).
\n2.  **La mise en ≈ìuvre de la proc√©dure de destitution** des √©lus, notamment pr√©sidentielle, en cas de manquement grave √† leurs devoirs, conform√©ment √† l'Article 68 de la Constitution.
\n3.  **Une refonte du syst√®me fiscal** pour une plus grande √©quit√© et une contribution juste de chacun.
\n4.  **Une v√©ritable transition √©cologique** qui ne laisse personne de c√¥t√©, financ√©e par la justice fiscale.
\n5.  **La fin de l'impunit√©** et la responsabilisation des √©lites √©conomiques et politiques.
\n\nPour le manifeste complet et toutes nos propositions, interrogez l'IA ou explorez les commandes /manifeste, /ric, /destitution.
`;
    await ctx.replyWithMarkdown(manifestoContent);
});
bot.action('engage_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const engageMessage = `Choisissez how you would like to engage :\n\n` +
                          `‚úÖ **Signer la P√©tition RIC :** Le R√©f√©rendum d'Initiative Citoyenne est au c≈ìur de nos demandes. Participez √† nos sondages r√©guliers sur le sujet, ou lancez la commande /ric pour en savoir plus.\n\n` +
                          `‚öñÔ∏è **Soutenir la Proc√©dure de Destitution :** Nous visons la responsabilisation des √©lus. Utilisez la commande /destitution pour comprendre l'Article 68 et nos actions.\n\n` +
                          `üí¨ **Jugement Majoritaire & Justice Sociale :** Explorez nos propositions pour une d√©mocratie plus juste. Vous pouvez poser des questions √† l'IA ou utiliser la commande /manifeste pour plus de d√©tails sur nos objectifs de justice sociale.`;
    const inlineKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('En savoir plus sur le RIC', 'ric_info_from_engage')],
        [Markup.button.callback('En savoir plus sur la Destitution', 'destitution_info_from_engage')],
        [Markup.button.callback('Retour au menu principal', 'start_menu')]
    ]);
    await ctx.replyWithMarkdown(engageMessage, inlineKeyboard);
});

// --- LOGIQUE DE MENU IA ---

bot.action('ai_tools_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const toolsMessage = `ü§ñ **Outils IA et Cr√©ation**\n\nChoisissez un outil pour g√©n√©rer du contenu ou acc√©der aux archives cr√©√©es par le mouvement :`;
    
    const inlineKeyboard = Markup.inlineKeyboard([
        [
            // Bouton pour la g√©n√©ration de Caricatures / Images
            Markup.button.callback('üñºÔ∏è G√©n√©rateur d\'Images (Caricature/Imagine)', 'generator_submenu')
        ],
        [
            // Option pour la galerie / archives
            Markup.button.callback('üìÇ Galerie & Archives', 'gallery_menu')
        ],
        [
            Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')
        ]
    ]);
    await ctx.replyWithMarkdown(toolsMessage, inlineKeyboard);
});

bot.action('generator_submenu', async (ctx) => {
    await ctx.answerCbQuery();
    const generatorMessage = `üñºÔ∏è **G√©n√©rateur d'Images**\n\nQuel type de contenu visuel souhaitez-vous cr√©er ?`;
    
    const inlineKeyboard = Markup.inlineKeyboard([
        [
            // Bouton pour la Caricature (expliquant la commande)
            Markup.button.callback('üí• Caricature Politique', 'info_caricature'), 
            // Bouton pour l'Image g√©n√©rale
            Markup.button.callback('‚ú® Image Libre (Imagine)', 'info_imagine')
        ],
        [
            Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')
        ]
    ]);
    await ctx.replyWithMarkdown(generatorMessage, inlineKeyboard);
});

// --- ACTION D'INFORMATION POUR /CARICATURE ---
bot.action('info_caricature', async (ctx) => {
    await ctx.answerCbQuery();
    const infoMessage = `**üí• Caricature Politique :**

Utilisez la commande \`/caricature [votre sujet]\` pour cr√©er une image satirique et politique percutante.

‚ú® **NOUVEAU !** Pour la caricature bas√©e sur la Plainte P√©nale contre X (D√©tournement, Abus d'Autorit√©, Crime d'√âtat), utilisez directement la commande : \`/caricature_plainte\`

Voici 5 exemples de sujets pour la commande \`/caricature\` classique :

1.  \`Le haut fonctionnaire et les sacs d'argent d√©tourn√© √©crasant le citoyen ruin√© (2017-2025)\`
2.  \`La main de la r√©pression frappant les dossiers judiciaires pour masquer la fraude √©lectorale\`
3.  \`Le symbole de l'Accord de Paris crachant des chemtrails financ√©s par des fonds ill√©gaux\`
4.  \`L'urne de vote renvers√©e et le politique masqu√© peignant "IMPUNIT√â" sur l'Article 68\`
5.  \`La main invisible de la citoyennet√© d√©chirant le mur de la corruption pour exiger la R√©paration Int√©grale\`

**Comment √ßa marche ?** L'IA va analyser votre texte et y ajouter des symboles visuels de Justice Corrompue, D√©tournement de Fonds et Abus d'Autorit√© pour un maximum d'impact.`;
    
    await ctx.replyWithMarkdown(infoMessage);
});

// --- ACTION D'INFORMATION POUR /IMAGINE (CORRIG√âE) ---
bot.action('info_imagine', async (ctx) => {
    await ctx.answerCbQuery();
    
    // Correction: Utilisation de la syntaxe Markdown stricte
    const infoMessage = `
*‚ú® Image Libre (Imagine) :*
    
Utilisez la commande \`/imagine [votre description]\` pour cr√©er n'importe quelle image bas√©e sur une description libre.
    
**Rappel :** Cette commande contextualise votre sujet avec les th√©matiques de la Plainte P√©nale (Justice, R√©sistance Citoyenne) pour une meilleure pertinence.

Voici quelques exemples rapides :
    
1. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
2. \`/imagine un dragon survolant l'Assembl√©e Nationale au coucher du soleil\`
3. \`/imagine un citoyen en col√®re devant l'Assembl√©e Nationale\``;
    
    await ctx.replyWithMarkdown(infoMessage); 
});


// --- ACTION PRINCIPALE DE PAGINATION DE LA GALERIE (AVEC FILTRE ET STABILIT√â) ---
bot.action(/view_gallery_page:(\d+):([a-zA-Z]+)/, async (ctx) => {
    // Match 1: Page Index, Match 2: Filter (e.g., 'ALL', 'caricature', 'imagine')
    const page = parseInt(ctx.match[1]); 
    const filter = ctx.match[2];
    await ctx.answerCbQuery(`Chargement de la page ${page + 1} (Filtre: ${filter})...`);
    
    const chatId = ctx.chat.id;
    const threadId = ctx.callbackQuery.message.message_thread_id;
    const messageId = ctx.callbackQuery.message.message_id;

    try {
        const files = await fs.readdir(GALLERY_DIR);
        
        // 1. FILTRAGE ET TRI
        let allImageFiles = files.filter(f => f.endsWith('.webp') || f.endsWith('.jpg') || f.endsWith('.png')).sort();

        if (filter !== 'ALL') {
            allImageFiles = allImageFiles.filter(f => f.startsWith(filter));
        }

        const totalCount = allImageFiles.length;
        const totalPages = Math.ceil(totalCount / IMAGES_PER_PAGE);

        if (totalCount === 0 || page < 0 || page >= totalPages) {
             // Si le filtre a produit 0 r√©sultats
             await ctx.telegram.editMessageText(chatId, messageId, undefined, 
                `*üñºÔ∏è Archives (Page ${page + 1} / ${totalPages})* \n\nAucune archive trouv√©e pour le filtre **${filter.toUpperCase()}**.`, 
                { parse_mode: 'Markdown', reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('Retour aux Filtres', 'gallery_menu')]
                ]).reply_markup }
            );
            return;
        }
        
        const start = page * IMAGES_PER_PAGE;
        const end = start + IMAGES_PER_PAGE;
        const imagesOnPage = allImageFiles.slice(start, end);

        // Cr√©er le groupe de m√©dias pour l'affichage en grille
        const mediaGroup = await Promise.all(imagesOnPage.map(async (fileName, index) => {
            const filePath = path.join(GALLERY_DIR, fileName);
            const imageBuffer = await fs.readFile(filePath);
            
            const fileType = fileName.split('_')[0];
            const timestamp = parseInt(fileName.split('_')[1]);
            const fileDate = new Date(timestamp).toLocaleDateString();

            return {
                type: 'photo',
                media: { source: imageBuffer },
                caption: (index === 0) ? `üñºÔ∏è Page ${page + 1}/${totalPages} | Type: ${fileType.toUpperCase()} (${fileDate})` : undefined,
                parse_mode: 'Markdown'
            };
        }));
        
        // --- Construction des boutons de pagination ---
        const navButtons = [];
        if (page > 0) {
            navButtons.push(Markup.button.callback('‚óÄÔ∏è Pr√©c√©dent', `view_gallery_page:${page - 1}:${filter}`));
        }
        navButtons.push(Markup.button.callback(`Page ${page + 1}/${totalPages}`, `gallery_menu`)); 
        if (page < totalPages - 1) {
            navButtons.push(Markup.button.callback('Suivant ‚ñ∂Ô∏è', `view_gallery_page:${page + 1}:${filter}`));
        }

        const keyboard = Markup.inlineKeyboard([
            navButtons,
            [Markup.button.callback('‚¨ÖÔ∏è Retour aux Outils IA', 'ai_tools_menu')]
        ]);

        // 1. Envoyer le groupe de photos (Grille)
        await ctx.telegram.sendMediaGroup(chatId, mediaGroup, { message_thread_id: threadId }); 
        
        // 2. √âditer le message INITIAL (celui qui avait le bouton cliqu√©) pour y ajouter le nouveau clavier de navigation.
        await ctx.telegram.editMessageText(chatId, messageId, undefined, 
            `*üñºÔ∏è Archives (Filtre: ${filter.toUpperCase()}, Page ${page + 1}/${totalPages})* \n\nLes ${IMAGES_PER_PAGE} archives ont √©t√© envoy√©es ci-dessus.`, 
            { parse_mode: 'Markdown', reply_markup: keyboard.reply_markup }
        );


    } catch (error) {
        console.error('Erreur fatale lors de la pagination de la galerie:', error);
        
        // Tenter d'envoyer un message d'erreur simple
        await ctx.reply('‚ùå Impossible de charger cette page des archives. (Veuillez recommencer depuis le menu IA).', Markup.inlineKeyboard([
            [Markup.button.callback('Retour √† la Galerie', 'gallery_menu')]
        ]));
    }
});


// --- COMMANDE /AI_VISION (MAINTENANT UN G√âN√âRATEUR AUTOMATIS√â) ---
bot.command('ai_vision', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Vision Contextuelle de la Plainte P√©nale";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'ai_vision');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Vision IA g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de /ai_vision (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation d\'image.');
    }
});


// --- COMMANDES ET FONCTIONS ORIGINALES ---
bot.command('galerie', handleGalleryMenu); 
bot.action('gallery_menu', handleGalleryMenu); // L'action appelle la m√™me logique

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    // Logique de correction: WebApp seulement en priv√©, URL en groupe
    if (isPrivateChat) {
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

bot.command('stats', async (ctx) => {
    const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
    const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
    await ctx.reply(statsMessage);
});
bot.command('manifeste', (ctx) => { ctx.reply('Le Manifeste du mouvement pour le 10 septembre est le suivant...'); });
bot.command('destitution', async (ctx) => { await ctx.replyWithMarkdown(await getDestitutionInfoMarkdown()); });
bot.command('ric', async (ctx) => { await ctx.replyWithMarkdown(await getRicInfoMarkdown()); });
bot.command('greve', async (ctx) => { await ctx.replyWithMarkdown(await getManifestationInfo()); });

// --- COMMANDE /CARICATURE (G√âN√âRALE AVEC CONTEXTUALISATION) ---
bot.command('caricature', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!topic) {
        await ctx.reply('Veuillez fournir le th√®me de votre caricature. Exemple: `/caricature la fraude aux comptes de campagne`');
        return;
    }
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Analyse du sujet et cr√©ation du prompt de caricature IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et satirique par Groq (contextualis√©)
        const imageDescription = await getCaricaturePrompt(topic);
        
        await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'caricature');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${topic.substring(0, 50)}...**`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec un th√®me diff√©rent.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature. V√©rifiez votre cl√© Gemini et Groq.');
    }
});

// --- COMMANDE /CARICATURE_PLAINTE (AUTOMATIS√âE) ---
bot.command('caricature_plainte', async (ctx) => {
    
    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Utilisation du prompt automatis√© "Plainte P√©nale - Crime d\'√âtat"...', { parse_mode: 'Markdown' });

        // 1. Utilisation du prompt d√©taill√© fixe
        const imageDescription = getPlaintePenaleCaricaturePrompt();
        const sujetCourt = "Plainte P√©nale - D√©tournement & Abus";
        
        await ctx.reply(`Description IA utilis√©e (fixe): \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        
        let imageSent = false;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');

                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'plainte_penale');

                await ctx.replyWithPhoto({ source: imageBuffer }, { caption: `Caricature politique g√©n√©r√©e sur le th√®me **${sujetCourt}** !`, parse_mode: 'Markdown' }); 
                imageSent = true;
                break;
            }
        }
        
        if (!imageSent) {
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer.');
        }

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de la caricature_plainte (Telegram):', error);
        await ctx.reply('‚ùå Une erreur est survenue lors du processus de cr√©ation de caricature.');
    }
});

// --- COMMANDE /IMAGINE (AVEC CONTEXTUALISATION ET SAUVEGARDE) ---
bot.command('imagine', async (ctx) => {
    const topic = ctx.message.text.split(' ').slice(1).join(' ');
    
    // CORRECTION: Ajout d'exemples si le topic est manquant
    if (!topic) { 
        await ctx.replyWithMarkdown(`Veuillez fournir une description pour l'image. 
Voici quelques exemples :
1. \`/imagine un dragon survolant une ville futuriste\`
2. \`/imagine la justice sociale repr√©sent√©e par une balance en or\`
3. \`/imagine un champ de bl√© √©crasant les symboles de l'√©vasion fiscale\`
        `); 
        return; 
    }

    try {
        await ctx.replyWithChatAction('upload_photo');
        await ctx.reply('‚è≥ **√âtape 1/2** : Contextualisation du sujet et cr√©ation du prompt d\'image IA...', { parse_mode: 'Markdown' });

        // 1. G√©n√©ration du prompt d√©taill√© et contextualis√© par Groq
        const imageDescription = await getImaginePromptContextualized(topic); 
        
await ctx.reply(`Description IA utilis√©e: \`${imageDescription.substring(0, 100)}...\`\n\n‚è≥ **√âtape 2/2** : G√©n√©ration de l'image par Gemini en cours...`);

        // 2. G√©n√©ration de l'image par Gemini
        const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
        const result = await model.generateContent(imageDescription);
        const response = result.response;
        const parts = response.candidates[0].content.parts;
        for (const part of parts) {
            if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                const imageData = part.inlineData.data;
                const imageBuffer = Buffer.from(imageData, 'base64');
                
                // üõë SAUVEGARDE AUTOMATIQUE
                await saveGeneratedImage(imageData, 'imagine');

                await ctx.replyWithPhoto({ source: imageBuffer });
                return;
            }
        }
        await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
        await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
    }
});


bot.command('create_poll', async (ctx) => {
    const question = 'Quel sujet devrions-nous aborder dans le prochain live ?';
    const options = ['Justice Sociale', 'Justice Fiscale', 'Justice Climatique'];
    try {
        const message = await ctx.replyWithPoll(question, options, { is_anonymous: false });
        const pollId = uuidv4();
        // Pour les sondages, il faut g√©rer la base de donn√©es de mani√®re plus robuste
        const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
        if (!db.polls) { db.polls = []; }
        db.polls.push({ id: pollId, messageId: message.message_id, question: question, options: options.map(opt => ({ text: opt, votes: 0 })), creatorId: ctx.from.id });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    } catch (error) { console.error('Erreur lors de la cr√©ation du sondage:', error); }
});
bot.on('poll_answer', async (ctx) => {
    const db = await readJsonFile(DATABASE_FILE_PATH, { polls: [] });
    const pollIndex = db.polls.findIndex(p => p.messageId === ctx.pollAnswer.poll_id);
    if (pollIndex !== -1) {
        ctx.pollAnswer.option_ids.forEach(optionIndex => { db.polls[pollIndex].options[optionIndex].votes++; });
        await writeJsonFile(DATABASE_FILE_PATH, db);
    }
});
bot.on('text', async (ctx) => {
    try {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        stats.totalMessages = (stats.totalMessages || 0) + 1;
        await writeJsonFile(STATS_FILE, stats);
    } catch (error) { console.error('Erreur lors de la mise √† jour du compteur de messages:', error); }
    if (ctx.message.text.startsWith('/')) { return; }
    await ctx.replyWithChatAction('typing');
    try {
        const userMessage = ctx.message.text;
        const aiResponse = await getGroqChatResponse(userMessage, 'llama-3.1-8b-instant', "Vous √™tes un assistant AGI utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
        await ctx.reply(aiResponse);
    } catch (error) {
        console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec llama-3.1-8b-instant:', error);
        await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
    }
});
bot.command('contact', async (ctx) => {
    const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
    if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
    if (ORGANIZER_GROUP_ID_CHAT) {
        try {
            await bot.telegram.sendMessage(ORGANIZER_GROUP_ID_CHAT, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
            await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
        } catch (error) { console.error('Erreur lors de l\'envoi du message aux organisateurs:', error); await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.'); }
    } else { await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.'); }
});
bot.on('message', async (msg) => {
  if (msg.text && msg.text.toLowerCase().includes('manifestation')) {
    const response = await getManifestationInfo();
    bot.telegram.sendMessage(msg.chat.id, response);
  }
});


// --- COMMANDES DE NAVIGATION D√âDI√âES ---

// üõë COMMANDE POUR LANCER LA TELEGRAM WEB APP (TWA) - CORRECTION DE L'ERREUR 400
bot.command('web', async (ctx) => {
    const isPrivateChat = ctx.chat.type === 'private';
    let webAppButton;

    if (isPrivateChat) {
        // Utilisation du bouton WebApp natif dans les chats priv√©s
        webAppButton = Markup.button.webApp('üåê Ouvrir la Web App (TWA)', WEB_APP_HTTPS_URL);
    } else {
        // Utilisation du bouton URL simple dans les groupes/topics pour √©viter l'erreur 400
        webAppButton = Markup.button.url('üåê Ouvrir l\'Application Web (Lien)', WEB_APP_HTTPS_URL);
    }
    
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Lancement de l'Application Web :**\n\nCliquez sur le bouton ci-dessous pour ouvrir l'interface. (Dans les groupes, l'ouverture native peut √™tre limit√©e.)`,
        Markup.inlineKeyboard([
            [webAppButton]
        ]));
});

// üõë COMMANDE POUR LE LIEN WEB SIMPLE
bot.command('app', async (ctx) => {
    await ctx.replyWithMarkdown(`üó∫Ô∏è **Acc√®s √† l'Application Web & Carte du Mouvement :**\n\nVous pouvez consulter les points de ralliement, le tableau de bord et les statistiques directement via notre application web.`,
        Markup.inlineKeyboard([
            [Markup.button.url('üåê Ouvrir l\'Application Web (Lien Simple)', WEB_APP_HTTPS_URL)]
        ]));
});

bot.command('topics', async (ctx) => {
    // Acc√®s direct au menu des topics
    const topicsMessage = `üîó **Espaces de Discussion et Organisation**\n\nCliquez sur un bouton ci-dessous pour acc√©der au topic correspondant dans notre groupe principal.`;
    
    const topicButtons = Object.entries(TOPIC_LINKS).map(([label, url]) => 
        Markup.button.url(label, url)
    );
    
    const keyboardRows = [];
    for (let i = 0; i < topicButtons.length; i += 2) {
        keyboardRows.push(topicButtons.slice(i, i + 2));
    }
    
    keyboardRows.push([Markup.button.callback('‚¨ÖÔ∏è Retour au Menu Principal', 'start_menu')]);

    await ctx.replyWithMarkdown(topicsMessage, Markup.inlineKeyboard(keyboardRows));
});


bot.action('show_help', async (ctx) => {
    await ctx.answerCbQuery();
    const helpMessage = `Voici les commandes que vous pouvez utiliser :
/start - Revenir au menu principal et message de bienvenue
/web - Lancer l'Application Web Telegram (TWA) (Nouveau!)
/app - Acc√®s direct √† l'Application Web (Lien simple)
/manifeste - Lire un extrait de notre manifeste
/topics - Acc√©der directement aux salons de discussion Telegram (Nouveau!)
/ric - Tout savoir sur le R√©f√©rendum d'Initiative Citoyenne
/destitution - Comprendre la proc√©dure de destitution (Art. 68)
/greve - Infos pratiques sur la Gr√®ve du 10 Septembre 2025
/sondage - Participer aux sondages d'opinion du mouvement
/petition - Acc√©der aux p√©titions en cours (via le bot)
/inviter - Inviter des amis √† rejoindre le bot et le mouvement
/imagine [description] - Cr√©er une image √† partir d'une description textuelle (contextualis√©e)
/caricature [description] - G√©n√©rer une image de caricature politique (agressive et contextualis√©e)
/caricature_plainte - Cr√©er une caricature automatis√©e sur la Plainte P√©nale
/ai_vision - G√©n√©rer la vision IA de la Plainte P√©nale (Nouveau!)
/stats - Afficher les statistiques d'utilisation du bot
/aboutai - En savoir plus sur mon fonctionnement
/help - Afficher ce message d'aide
`;
    await ctx.reply(helpMessage);
});
bot.help((ctx) => ctx.reply('Commandes disponibles: /start, /manifeste, /ric, /destitution, /greve, /topics, /galerie, /app, /web, /imagine, /caricature, /caricature_plainte, /ai_vision, /stats, /help'));

// ... (le reste des commandes)

// --- MISE √Ä JOUR DU MENU DES COMMANDES OFFICIELLES ---

// Cette fonction garantit que le menu / est mis √† jour dans l'interface Telegram
async function setBotCommands() {
    // Les commandes list√©es ici sont celles qui apparaissent dans le menu /
    const commands = [
        { command: 'start', description: 'Revenir au menu principal.' },
        { command: 'web', description: 'Lancer l\'Application Web Telegram (TWA).' },
        { command: 'app', description: 'Acc√®s direct √† l\'Application Web (Lien simple).' },
        { command: 'manifeste', description: 'Lire un extrait du manifeste.' },
        { command: 'topics', description: 'Acc√©der aux salons de discussion Telegram.' },
        { command: 'ric', description: 'Tout savoir sur le R√©f√©rendum d\'Initiative Citoyenne.' },
        { command: 'destitution', description: 'Comprendre la proc√©dure de destitution.' },
        { command: 'greve', description: 'Infos pratiques sur la Gr√®ve du 10 Septembre 2025.' },
        { command: 'galerie', description: 'Acc√©der √† la galerie des images g√©n√©r√©es.' },
        { command: 'imagine', description: 'G√©n√©rer une image libre via l\'IA.' },
        { command: 'caricature', description: 'G√©n√©rer une caricature politique via l\'IA.' },
        { command: 'help', description: 'Afficher toutes les commandes.' },
    ];
    
    // Tentative de d√©finition des commandes au d√©marrage du bot
    try {
        await bot.telegram.setMyCommands(commands);
        console.log("‚úÖ Commandes officielles du bot mises √† jour sur Telegram.");
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour des commandes du bot:", error.message);
    }
}

// Optionnel: Appeler la fonction lors de l'initialisation du module
setBotCommands(); 

module.exports = bot;