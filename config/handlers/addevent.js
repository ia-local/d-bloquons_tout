// Fichier: bot/handlers/addevent.js

// On importe le cerveau des donn√©es. Attention au chemin relatif !
const dataService = require('../../services/dataService.js');

/**
 * Attache la commande /addevent au bot.
 * @param {Telegraf} bot - L'instance du bot Telegraf.
 */
module.exports = (bot) => {
    bot.command('addevent', async (ctx) => {
        // 1. Extraire la description de l'√©v√©nement depuis le message de l'utilisateur
        // ex: "/addevent Rassemblement √† 14h devant la mairie"
        const text = ctx.message.text.split(' ').slice(1).join(' ');

        // 2. V√©rifier si l'utilisateur a bien fourni une description
        if (!text) {
            return ctx.reply('‚ö†Ô∏è Usage: /addevent [description compl√®te de l\'√©v√©nement]');
        }

        try {
            // 3. Pr√©parer l'objet de donn√©es pour le nouvel √©v√©nement
            const eventData = {
                description: text,
                lieu: "D√©fini via Telegram", // On peut mettre une valeur par d√©faut
                log: null,
                lat: null
            };

            // 4. Appeler notre service centralis√© pour ajouter l'√©l√©ment
            const newEvent = await dataService.addElement('evenements', eventData);

            // 5. Confirmer √† l'utilisateur que l'op√©ration a r√©ussi
            await ctx.reply(`‚úÖ √âv√©nement ajout√© avec succ√®s !\n\n*ID*: \`${newEvent.id}\`\n*Description*: ${newEvent.description}`, { parse_mode: 'Markdown' });

        } catch (error) {
            // 6. En cas d'erreur, informer l'utilisateur et logguer le probl√®me
            console.error("üí• Erreur lors de l'ex√©cution de /addevent:", error);
            await ctx.reply(`‚ùå Une erreur est survenue lors de l'ajout de l'√©v√©nement.`);
        }
    });
};