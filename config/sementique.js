// Fichier : services/iaSemanticEngine.js (Super Module d'Analyse S√©mantique/Emoji)

const Groq = require('groq-sdk');
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// Initialisation du client Groq
const groq = new Groq({ apiKey: GROQ_API_KEY });

// --- Dictionnaires de Tenseurs Emojis (√âtendus) ---

/**
 * Dictionnaire √©tendu pour guider l'IA vers les symboles sp√©cifiques au mouvement.
 * Les valeurs sont des emojis ou des cha√Ænes de caract√®res.
 */
const TENSOR_DICTIONARY = {
  
};

/**
 * Analyse le texte utilisateur pour extraire des emojis pertinents bas√©s sur trois cat√©gories de tenseurs.
 * Le mod√®le Groq est contraint √† produire une cha√Æne JSON pour une fiabilit√© maximale.
 * * @param {string} text Le texte pour lequel les emojis doivent √™tre g√©n√©r√©s.
 * @returns {Promise<string>} Une cha√Æne d'emojis sugg√©r√©s (ex: "üí∞üì¢üá´üá∑").
 */
async function generateContextualEmoji(text) {
    if (!GROQ_API_KEY) {
        return 'üîπ'; // Emoji par d√©faut si API key manquante
    }

    const systemMessage = `
        Tu es l'unit√© de Tenseur S√©mantique IA pour le projet Manifest.910-2025.
        Ton r√¥le est d'analyser le texte de l'utilisateur et d'identifier les emojis pertinents dans les quatre cat√©gories suivantes (Activity, Object, Flag, Symbol).
        Tu DOIS retourner un objet JSON avec OBLIGATOIREMENT les quatre cl√©s "activity", "object", "flag", et "symbol".
        Pour chaque cl√©, attribue l'emoji le PLUS pertinent de la cat√©gorie, ou une cha√Æne vide "" si aucun n'est pertinent.
        Les emojis disponibles sont bas√©s sur le dictionnaire √©tendu.

        Exemple de sortie JSON strict (OBLIGATOIRE):
        { "activity": "üì¢", "object": "üí∞", "flag": "", "symbol": "‚û°Ô∏è" }
    `;
    
    // Contrainte du mod√®le pour qu'il utilise le dictionnaire
    const dictionaryPrompt = `Dictionnaire de Tenseurs: ${JSON.stringify(TENSOR_DICTIONARY)}.`;

    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'system', content: systemMessage + dictionaryPrompt },
                { role: 'user', content: `Texte √† analyser : "${text}"` }
            ],
            model: 'llama-3.1-8b-instant',
            response_format: { type: "json_object" }, // Cl√© pour forcer la sortie JSON
            temperature: 0.1, 
            max_tokens: 200 
        });

        const jsonResponse = JSON.parse(chatCompletion.choices[0].message.content);
        
        // Concat√©ner et nettoyer les r√©sultats (maintenant avec 'symbol')
        const emojis = [
            jsonResponse.activity, 
            jsonResponse.object, 
            jsonResponse.flag,
            jsonResponse.symbol
        ].filter(e => e && e.length > 0).join('');
        
        return emojis || 'üí¨';

    } catch (error) {
        console.error("Erreur critique de l'IA S√©mantique (JSON Parse/API):", error.message);
        return 'üî•'; 
    }
}

module.exports = {
    generateContextualEmoji,
    TENSOR_DICTIONARY,
};
