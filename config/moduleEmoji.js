const Groq = require('groq-sdk');
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// Initialisation du client Groq
const groq = new Groq({ apiKey: GROQ_API_KEY });

// --- Dictionnaires de Tenseurs Emojis (Final et Unifi√©) ---

/**
 * Dictionnaire FINAL de Tenseurs, organis√© par Cat√©gorie d'Impact S√©mantique.
 * Chaque entr√©e inclut le Concept Cl√© et la S√©mantique Cognitive (W3C) pour aff√ªter l'IA.
 */
const TENSOR_DICTIONARY = {
    // Cat√©gorie 1: IMPACT (Statut, Ton, Urgence)
    IMPACT: {
        CRITICAL: { emoji: 'üî•', concept: 'Crise/Urgence', semantic: 'N√©cessite une attention imm√©diate ou signale un √©chec critique (syst√©mique).' },
        URGENCY: { emoji: 'üö®', concept: 'Alerte/Appel', semantic: 'Appel direct √† la mobilisation. Fort verbe d\'action implicite.' },
        POSITIVE: { emoji: '‚úÖ', concept: 'Succ√®s/Validation', semantic: 'Statut valid√©, objectif atteint, r√©sultat positif.' },
        NEGATIVE: { emoji: '‚ùå', concept: '√âchec/Refus', semantic: 'Opposition, r√©sultat n√©gatif, √©l√©ment bloqu√© ou refus√©.' },
        QUESTION: { emoji: '‚ùì', concept: 'Interrogation/Doute', semantic: 'Demande d\'information ou expression de doute.' },
        IDEA: { emoji: 'üí°', concept: 'Suggestion', semantic: 'Nouvelle proposition, solution trouv√©e, brainstorming.' },
        CELEBRATION: { emoji: 'üéâ', concept: '√âv√©nement/R√©compense', semantic: 'C√©l√©bration, √©v√©nement r√©ussi ou r√©compense attribu√©e.' },
    },
    
    // Cat√©gorie 2: ACTION (Domaine d'ex√©cution Fonctionnel)
    ACTION: {
        FINANCE_FUND: { emoji: 'üí∞', concept: 'Tr√©sorerie/Budget', semantic: 'Domaine de la gestion mon√©taire, de la caisse ou de la distribution.' },
        LAW_DEBATE: { emoji: '‚öñÔ∏è', concept: 'Justice/L√©galit√©', semantic: 'Domaine du droit, de la l√©gislation, de la destitution ou de la plainte.' },
        GOVERNANCE: { emoji: 'üó≥Ô∏è', concept: 'Vote/D√©mocratie', semantic: 'Domaine du RIC, du vote, et de la prise de d√©cision politique.' },
        TECH_DEVOPS: { emoji: 'üíª', concept: 'D√©veloppement/DevOps', semantic: 'Domaine de la programmation, de l\'infrastructure et de la maintenance (Ex: DEVOPS).' },
        AI_MODULE: { emoji: 'ü§ñ', concept: 'Intelligence Artificielle', semantic: 'Domaine des outils IA, des mod√®les Groq/Gemini et de l\'automatisation.' },
    },
    
    // Cat√©gorie 3: FLUX (Progression, Ordre, Direction)
    FLUX: {
        ARROW_NEXT: { emoji: '‚û°Ô∏è', concept: 'Suite/Direction', semantic: 'Indique une √©tape suivante, une redirection ou un lien.' },
        PROGRESS_UP: { emoji: '‚¨ÜÔ∏è', concept: 'Hausse/Am√©lioration', semantic: 'Indique une croissance ou une am√©lioration d\'une m√©trique.' },
        PROGRESS_DOWN: { emoji: '‚¨áÔ∏è', concept: 'Baisse/R√©gression', semantic: 'Indique une diminution ou une alerte √† la baisse.' },
        ORDER_STEP: { emoji: '1Ô∏è‚É£', concept: '√âtape/Priorit√©', semantic: 'Indique un ordre, une num√©rotation ou une s√©quence d\'actions.' },
        CHECK_WAVE: { emoji: '„Ä∞Ô∏è', concept: 'V√©rification/Statut', semantic: 'Statut de progression, attente de confirmation, √©l√©ment en mouvement.' },
    },
    
    // Cat√©gorie 4: ENTITY (Acteurs et Organisation)
    ENTITY: {
        PERSON_AGENT: { emoji: 'üë§', concept: 'Agent/Individu', semantic: 'Contexte individuel, profil d\'utilisateur, contact personnel.' },
        GROUP_COMMUNITY: { emoji: 'üë•', concept: 'Communaut√©/Groupe', semantic: 'Contexte collectif, organisation d\'√©quipe, r√©seau.' },
    },

    // Cat√©gorie 5: ACTIVITY (T√¢che sp√©cifique du Mouvement)
    ACTIVITY: {
        PROTEST: { emoji: 'üì¢', concept: 'Manifestation', semantic: 'T√¢che physique ou √©v√©nement de mobilisation de masse.' },
        RESEARCH: { emoji: 'üîç', concept: 'Veille/Analyse', semantic: 'T√¢che d\'acquisition de donn√©es et d\'information (Rechercher, Scruter).' },
        BOYCOTT: { emoji: 'üõí‚ùå', concept: 'Boycott/Commerce', semantic: 'T√¢che li√©e aux actions cibl√©es sur les enseignes commerciales.' },
        DEBATE: { emoji: 'üí¨', concept: 'Discussion/√âchange', semantic: 'T√¢che de communication et d\'organisation interne.' },
    },

    // Cat√©gorie 6: OBJECT (Concepts et R√©compenses)
    OBJECT: {
        MAP_LOCATION: { emoji: 'üó∫Ô∏è', concept: 'Carte/Localisation', semantic: 'R√©f√©rence √† la zone g√©ographique ou aux points de ralliement.' },
        REWARD_TROPHY: { emoji: 'üèÜ', concept: 'R√©compense/Score', semantic: 'R√©f√©rence au CVNU, √† l\'UTMi ou √† l\'accomplissement de mission.' },
        ALERT: { emoji: '‚ö†Ô∏è', concept: 'Avertissement/Censure', semantic: 'Objet symbolisant un probl√®me ou une alerte.' },
        DOCUMENT: { emoji: 'üìÑ', concept: 'L√©gislation/Texte', semantic: 'R√©f√©rence √† un document l√©gal, un manifeste ou un texte.' },
    },
    
    // Cat√©gorie 7: FLAG (G√©ographie et Contexte)
    FLAG: {
        FRANCE_FLAG: { emoji: 'üá´üá∑', concept: 'Contexte National', semantic: 'R√©f√©rence au pays, au gouvernement ou √† la l√©gislation nationale.' },
        EUROPE_FLAG: { emoji: 'üá™üá∫', concept: 'Contexte Europ√©en', semantic: 'R√©f√©rence au contexte europ√©en ou international.' },
        WORLD_GLOBE: { emoji: 'üåç', concept: 'Monde/Global', semantic: 'Contexte mondial ou environnemental.' },
    },

    // Cat√©gorie 8: SYMBOL (Caract√®res de progression simples)
    SYMBOL: {
        CHECK_MARK: { emoji: '‚úîÔ∏è', concept: 'Marque/V√©rifi√©', semantic: 'Confirmation simple, √©l√©ment coch√© ou v√©rifi√©.' },
        LETTER_A: { emoji: 'üÖ∞Ô∏è', concept: 'Option A', semantic: 'D√©signe la premi√®re option ou un niveau de priorit√© A.' },
        LETTER_B: { emoji: 'üÖ±Ô∏è', concept: 'Option B', semantic: 'D√©signe la deuxi√®me option ou un niveau de priorit√© B.' },
        ARROW_UP_SIMPLE: { emoji: 'üîº', concept: 'Minimal Up', semantic: 'Ascension ou direction positive minimale (pour les indicateurs).' },
        WAVE: { emoji: '„Ä∞Ô∏è', concept: 'Mouvement/Non Lin√©aire', semantic: 'Repr√©sente le mouvement, l\'ambigu√Øt√© ou une progression non stable.' },
    },
};

/**
 * Analyse le texte utilisateur pour extraire des emojis pertinents bas√©s sur les 8 cat√©gories de tenseurs.
 * Le mod√®le Groq est contraint √† produire une cha√Æne JSON avec les 8 cl√©s OBLIGATOIRES.
 * @param {string} text Le texte pour lequel les emojis doivent √™tre g√©n√©r√©s.
 * @param {boolean} [returnDetailedObject=false] Indique si la fonction doit retourner l'objet JSON complet au lieu de la cha√Æne concat√©n√©e.
 * @returns {Promise<string|object>} La cha√Æne d'emojis sugg√©r√©s ou l'objet d√©taill√©.
 */
async function generateContextualEmoji(text, returnDetailedObject = false) {
    if (!GROQ_API_KEY) {
        return 'üîπ';
    }

    // üõë NOUVEAU SYSTEM MESSAGE - Contraint l'IA √† utiliser les 8 cat√©gories s√©mantiques.
    const systemMessage = `
        Tu es l'unit√© de Tenseur S√©mantique IA pour le projet Manifest.910-2025 (V5.1).
        Ton objectif est de garantir une analyse s√©mantique √† 8 dimensions (IMPACT, ACTION, FLUX, ENTITY, ACTIVITY, OBJECT, FLAG, SYMBOL).
        
        R√®gles d'Analyse Cognitive :
        1. Pour chaque cat√©gorie (cl√©), analyse le Concept Cl√©, le Verbe d'Action et la S√©mantique W3C du dictionnaire.
        2. S√©lectionne l'emoji le PLUS PERTINENT pour chaque cat√©gorie, selon les donn√©es du dictionnaire.
        3. Sortie Stricte : Tu DOIS retourner un objet JSON avec OBLIGATOIREMENT les huit cl√©s list√©es ci-dessous.

        Cl√©s de Sortie Obligatoires : ["impact", "action", "flux", "entity", "activity", "object", "flag", "symbol"]
    `;
    
    // Pr√©pare le dictionnaire pour le prompt Groq
    const simplifiedDictionary = {};
    for (const category in TENSOR_DICTIONARY) {
        simplifiedDictionary[category] = {};
        for (const key in TENSOR_DICTIONARY[category]) {
            const item = TENSOR_DICTIONARY[category][key];
            // L'IA n'a besoin que de l'emoji et du contexte s√©mantique pour choisir
            simplifiedDictionary[category][key] = { emoji: item.emoji, semantic: item.semantic };
        }
    }
    
    const dictionaryPrompt = `Dictionnaire de Tenseurs Aff√ªt√©s: ${JSON.stringify(simplifiedDictionary)}.`;

    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'system', content: systemMessage + dictionaryPrompt },
                { role: 'user', content: `Texte √† analyser : "${text}"` }
            ],
            model: 'llama-3.1-8b-instant',
            response_format: { type: "json_object" }, 
            temperature: 0.1, 
            max_tokens: 200 
        });

        const jsonResponse = JSON.parse(chatCompletion.choices[0].message.content);
        
        if (returnDetailedObject) {
            return jsonResponse;
        }

        // Concat√©ner et nettoyer les r√©sultats pour le retour standard
        const orderedKeys = ["impact", "action", "flux", "entity", "activity", "object", "flag", "symbol"];
        const emojis = orderedKeys
            .map(key => jsonResponse[key])
            .filter(e => e && e.length > 0)
            .join('');
        
        return emojis || 'üí¨';

    } catch (error) {
        console.error("Erreur critique de l'IA S√©mantique (JSON Parse/API):", error.message);
        return 'üî•'; 
    }
}

module.exports = {
    generateContextualEmoji,
    TENSOR_DICTIONARY,
};