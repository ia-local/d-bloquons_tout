// Fichier : utils/modulleAscii.js - Logique de construction ASCII Art (CommonJS pour Node.js)

// --- 1. D√©finition des Caract√®res Tensor ---

/**
 * Caract√®res de bordure et de coin pour les cadres.
 */
const TENSOR_BORDERS = {
    CORNER_TOP_LEFT: '‚ïî',
    CORNER_TOP_RIGHT: '‚ïó',
    CORNER_BOTTOM_LEFT: '‚ïö',
    CORNER_BOTTOM_RIGHT: '‚ïù',
    LINE_HORIZONTAL: '‚ïê',
    LINE_VERTICAL: '‚ïë',
    JOINT_LEFT: '‚ï†',
    JOINT_RIGHT: '‚ï£',
    JOINT_TOP: '‚ï¶',
    JOINT_BOTTOM: '‚ï©',
    JOINT_CROSS: '‚ï¨',
};

/**
 * Caract√®res de raccord ou de jointure pour les tableaux et les structures internes.
 */
const TENSOR_JOINTS = {
    LINE_SIMPLE: '‚îÄ',
    LINE_VERTICAL_SIMPLE: '‚îÇ',
    JOINT_LEFT_T: '‚îú',
    JOINT_RIGHT_T: '‚î§',
    JOINT_TOP_T: '‚î¨',
    JOINT_BOTTOM_T: '‚î¥',
    JOINT_CROSS: '‚îº',
    JOINT_LEFT_DOUBLE: '‚ï†',
    JOINT_RIGHT_DOUBLE: '‚ï£',
    JOINT_BOTTOM_DOUBLE: '‚ï©',
};

/**
 * Caract√®res de rendu pour le remplissage, les points, les s√©parateurs et les graphiques.
 */
const TENSOR_RENDER = {
    LINE_SIMPLE: '‚îÄ',
    LINE_VERTICAL_SIMPLE: '‚îÇ',
    POINT_SMALL: '¬∑',
    POINT_MEDIUM: ':',
    SOLID_BLOCK: '‚ñà',
    LIGHT_BLOCK: '‚ñë', 
    FILL_LIGHT: '‚ñë', 
    FILL_MEDIUM: '‚ñí', 
    FILL_HEAVY: '‚ñì', 
    FILL_SOLID: '‚ñà', 
};
/**
 * Constante logique repr√©sentant une condition de bordure pour le remplissage.
 */
const TENSOR_CONSTANTS = {
    BLOCK_CONDITION: "[x === width - 1] = 1",
    SOLID_BLOCK: '‚ñà',
    EMPTY_BLOCK: '‚ñë'
};

// --- Fonctions de Base de Rendu ASCII (simplifi√©es pour la CJS) ---
// Note: Les fonctions utilitaires compl√®tes drawAsciiTable, drawSimpleFrame, etc., ne sont pas incluses 
// dans ce module Node.js car elles sont seulement utilis√©es par le Frontend, mais leurs constantes le sont.

// üõë NOUVELLES CONSTANTES AGR√âG√âES (TENSORS FINALS) üõë

/**
 * Tenseur final pour la cr√©ation de tableaux.
 */
const TENSOR_TABLEAU = 
    TENSOR_BORDERS.CORNER_TOP_LEFT + TENSOR_BORDERS.CORNER_TOP_RIGHT + TENSOR_BORDERS.CORNER_BOTTOM_LEFT + TENSOR_BORDERS.CORNER_BOTTOM_RIGHT +
    TENSOR_BORDERS.LINE_HORIZONTAL + TENSOR_BORDERS.LINE_VERTICAL + 
    TENSOR_JOINTS.JOINT_LEFT_T + TENSOR_JOINTS.JOINT_RIGHT_T + TENSOR_JOINTS.JOINT_TOP_T + TENSOR_JOINTS.JOINT_BOTTOM_T + TENSOR_JOINTS.JOINT_CROSS;

/**
 * Tenseur final pour la cr√©ation de graphiques et de barres de progression.
 */
const TENSOR_CHART = 
    TENSOR_RENDER.LINE_SIMPLE + TENSOR_RENDER.LINE_VERTICAL_SIMPLE + 
    TENSOR_RENDER.POINT_SMALL + TENSOR_RENDER.POINT_MEDIUM + 
    TENSOR_RENDER.FILL_LIGHT + TENSOR_RENDER.FILL_MEDIUM + TENSOR_RENDER.FILL_HEAVY + TENSOR_RENDER.FILL_SOLID;


// üõë EXPORTATION COMMONJS üõë
module.exports = {
    TENSOR_BORDERS,
    TENSOR_JOINTS,
    TENSOR_RENDER,
    TENSOR_CONSTANTS,
    TENSOR_TABLEAU,
    TENSOR_CHART
};
